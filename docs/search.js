window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = {"version": "0.9.5", "fields": ["qualname", "fullname", "annotation", "default_value", "signature", "bases", "doc"], "ref": "fullname", "documentStore": {"docs": {"magic_list": {"fullname": "magic_list", "modulename": "magic_list", "kind": "module", "doc": "<p>This module contains two symbols:</p>\n\n<ul>\n<li><code>list</code>, a type that extends the built-in equivalent</li>\n<li><code>L</code>, a pseudo-literal which can be used to create magic lists similarly to built-in ones.</li>\n</ul>\n\n<p>They can be imported as following:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">magic_list</span> <span class=\"kn\">import</span> <span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"n\">L</span>\n</code></pre>\n</div>\n"}, "magic_list.list": {"fullname": "magic_list.list", "modulename": "magic_list", "qualname": "list", "kind": "class", "doc": "<p>Mutable homogeneous sequence.\nDrop-in replacement for the built-in <code>list</code> type.</p>\n", "bases": "collections.UserList[~_T]"}, "magic_list.list.head": {"fullname": "magic_list.list.head", "modulename": "magic_list", "qualname": "list.head", "kind": "variable", "doc": "<p>First item of the list.</p>\n\n<div class=\"pdoc-alert pdoc-alert-warning\">\n\n<h6 id=\"the-list-must-be-non-empty\">The list must be non-empty.</h6>\n\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">head</span>\n<span class=\"go\">3</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">list</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">head</span>\n<span class=\"go\">*- TypeError: empty list has no head -*</span>\n</code></pre>\n</div>\n", "annotation": ": ~_T"}, "magic_list.list.tail": {"fullname": "magic_list.list.tail", "modulename": "magic_list", "qualname": "list.tail", "kind": "variable", "doc": "<p>List without its first item.</p>\n\n<div class=\"pdoc-alert pdoc-alert-warning\">\n\n<h6 id=\"the-list-must-be-non-empty\">The list must be non-empty.</h6>\n\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">tail</span>\n<span class=\"go\">[5, 2]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">list</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">tail</span>\n<span class=\"go\">*- TypeError: empty list has no tail -*</span>\n</code></pre>\n</div>\n", "annotation": ": &#x27;typing_extensions.Self&#x27;"}, "magic_list.list.init": {"fullname": "magic_list.list.init", "modulename": "magic_list", "qualname": "list.init", "kind": "variable", "doc": "<p>List without its last item.</p>\n\n<div class=\"pdoc-alert pdoc-alert-warning\">\n\n<h6 id=\"the-list-must-be-non-empty\">The list must be non-empty.</h6>\n\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">init</span>\n<span class=\"go\">[3, 5]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">list</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">init</span>\n<span class=\"go\">*- TypeError: empty list has no init -*</span>\n</code></pre>\n</div>\n", "annotation": ": &#x27;typing_extensions.Self&#x27;"}, "magic_list.list.last": {"fullname": "magic_list.list.last", "modulename": "magic_list", "qualname": "list.last", "kind": "variable", "doc": "<p>Last item of the list.</p>\n\n<div class=\"pdoc-alert pdoc-alert-warning\">\n\n<h6 id=\"the-list-must-be-non-empty\">The list must be non-empty.</h6>\n\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">last</span>\n<span class=\"go\">2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">list</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">last</span>\n<span class=\"go\">*- TypeError: empty list has no last -*</span>\n</code></pre>\n</div>\n", "annotation": ": ~_T"}, "magic_list.list.prepend": {"fullname": "magic_list.list.prepend", "modulename": "magic_list", "qualname": "list.prepend", "kind": "function", "doc": "<p>Add an item at the beginning of the list.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">l</span><span class=\"o\">.</span><span class=\"n\">prepend</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">)</span>\n<span class=\"go\">[-2, 3, 5, 2]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">_T</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, "magic_list.list.reversed": {"fullname": "magic_list.list.reversed", "modulename": "magic_list", "qualname": "list.reversed", "kind": "function", "doc": "<p>Return a reversed version of the list.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">reversed</span><span class=\"p\">()</span>\n<span class=\"go\">[3, 2, 1]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;typing_extensions.Self&#39;</span>:</span></span>", "funcdef": "def"}, "magic_list.list.sorted": {"fullname": "magic_list.list.sorted", "modulename": "magic_list", "qualname": "list.sorted", "kind": "function", "doc": "<p>Return a sorted version of the list.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">sorted</span><span class=\"p\">()</span>\n<span class=\"go\">[2, 3, 5]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"s2\">&quot;gala&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sorted</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"nb\">ord</span><span class=\"p\">)</span>\n<span class=\"go\">[&quot;a&quot;, &quot;a&quot;, &quot;g&quot;, &quot;l&quot;]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"s1\">&#39;collections.abc.Callable[[_T], _typeshed.SupportsRichComparison] | None&#39;</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">reverse</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;typing_extensions.Self&#39;</span>:</span></span>", "funcdef": "def"}, "magic_list.list.shuffled": {"fullname": "magic_list.list.shuffled", "modulename": "magic_list", "qualname": "list.shuffled", "kind": "function", "doc": "<p>Return a shuffled version of the list.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">shuffled</span><span class=\"p\">()</span>\n<span class=\"go\">[5, 2, 3]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">shuffled</span><span class=\"p\">()</span>\n<span class=\"go\">[2, 5, 3]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">list</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">shuffled</span><span class=\"p\">()</span>\n<span class=\"go\">[]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;typing_extensions.Self&#39;</span>:</span></span>", "funcdef": "def"}, "magic_list.list.map": {"fullname": "magic_list.list.map", "modulename": "magic_list", "qualname": "list.map", "kind": "function", "doc": "<p>Apply <code>function</code> on each item of the list.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n<span class=\"go\">[&quot;3&quot;, &quot;5&quot;, &quot;2&quot;]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"n\">n</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">[6, 10, 4]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">list</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"n\">n</span> <span class=\"o\">*</span> <span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"go\">[]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">function</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">_T</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">_U</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">magic_list</span><span class=\"o\">.</span><span class=\"n\">prelude</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">_U</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "magic_list.list.rotate": {"fullname": "magic_list.list.rotate", "modulename": "magic_list", "qualname": "list.rotate", "kind": "function", "doc": "<p>Shift the list <code>n</code> times to the right. The items that overflow get prepended.</p>\n\n<p>If <code>n</code> is negative, the shift goes to the left.</p>\n\n<div class=\"pdoc-alert pdoc-alert-warning\">\n\n<h6 id=\"the-list-must-be-non-empty\">The list must be non-empty.</h6>\n\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">rotate</span><span class=\"p\">()</span>\n<span class=\"go\">[2, 3, 5]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">rotate</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">[5, 2, 3]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">rotate</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">[5, 2, 3]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">list</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">rotate</span><span class=\"p\">()</span>\n<span class=\"go\">*- TypeError: empty list cannot be rotated -*</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;typing_extensions.Self&#39;</span>:</span></span>", "funcdef": "def"}, "magic_list.list.filter": {"fullname": "magic_list.list.filter", "modulename": "magic_list", "qualname": "list.filter", "kind": "function", "doc": "<p>Discard each item <code>i</code> of the list if <code>function(i)</code> is <code>False</code>.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">[3, 5]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"s2\">&quot;hello&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;hola&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;bonjour&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">s</span><span class=\"p\">:</span> <span class=\"s2\">&quot;l&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">s</span><span class=\"p\">)</span>\n<span class=\"go\">[&quot;hello&quot;, &quot;hola&quot;]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">list</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"n\">n</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">[]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">function</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">_T</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;typing_extensions.Self&#39;</span>:</span></span>", "funcdef": "def"}, "magic_list.list.mask": {"fullname": "magic_list.list.mask", "modulename": "magic_list", "qualname": "list.mask", "kind": "function", "doc": "<p>Keep every element at index <code>i</code> of the list if the corresponding\nelement at index <code>i</code> of the mask sequence is <code>True</code> ; else, discard\nit. Return the filtered list.</p>\n\n<div class=\"pdoc-alert pdoc-alert-warning\">\n\n<h6 id=\"the-mask-sequence-must-be-of-the-same-length-as-the-list\">The mask sequence must be of the same length as the list.</h6>\n\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">mask</span><span class=\"p\">([</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">])</span>\n<span class=\"go\">[3, 2]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">list</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">mask</span><span class=\"p\">([])</span>\n<span class=\"go\">[]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">mask</span><span class=\"p\">([</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">])</span>\n<span class=\"go\">*- TypeError: mask length must be the same as the list -*</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">mask_seq</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;typing_extensions.Self&#39;</span>:</span></span>", "funcdef": "def"}, "magic_list.list.deduplicate": {"fullname": "magic_list.list.deduplicate", "modulename": "magic_list", "qualname": "list.deduplicate", "kind": "function", "doc": "<p>Remove duplicate elements from left to right (and keep original ones).\nReturn the deduplicated list.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">18</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">deduplicate</span><span class=\"p\">()</span>\n<span class=\"go\">[3, 0, 1, 18]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"s2\">&quot;hello&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;hello&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;world&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;world&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">deduplicate</span><span class=\"p\">()</span>\n<span class=\"go\">[&quot;hello&quot;, &quot;world&quot;]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">list</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">deduplicate</span><span class=\"p\">()</span>\n<span class=\"go\">[]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;typing_extensions.Self&#39;</span>:</span></span>", "funcdef": "def"}, "magic_list.list.reduce": {"fullname": "magic_list.list.reduce", "modulename": "magic_list", "qualname": "list.reduce", "kind": "function", "doc": "<p>\"Insert\" an operator (called a reducing function) between each element\nfrom left to right and return the result.</p>\n\n<p>The first element of the list is used as the leftmost value ;\ntherefore, if the list is empty, it will raise an exception.</p>\n\n<div class=\"pdoc-alert pdoc-alert-warning\">\n\n<h6 id=\"the-list-must-be-non-empty\">The list must be non-empty.</h6>\n\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">reduce</span><span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">)</span>  <span class=\"c1\"># (3 + 5) + 2</span>\n<span class=\"go\">10</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">list</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">reduce</span><span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">)</span>\n<span class=\"go\">*- TypeError: the list to reduce cannot be empty -*</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">function</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">_T</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">_T</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">_T</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">_T</span>:</span></span>", "funcdef": "def"}, "magic_list.list.reduce_right": {"fullname": "magic_list.list.reduce_right", "modulename": "magic_list", "qualname": "list.reduce_right", "kind": "function", "doc": "<p>\"Insert\" an operator (called a reducing function) between each element\nfrom right to left and return the result.</p>\n\n<p>The last element of the list is used as the leftmost value ;\ntherefore, if the list is empty, it will raise an exception.</p>\n\n<div class=\"pdoc-alert pdoc-alert-warning\">\n\n<h6 id=\"the-list-must-be-non-empty\">The list must be non-empty.</h6>\n\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">reduce_right</span><span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">)</span>  <span class=\"c1\"># 3 + (5 + 2)</span>\n<span class=\"go\">10</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">reduce_right</span><span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">)</span>  <span class=\"c1\"># 3 - (5 - 2)</span>\n<span class=\"go\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">list</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">reduce_right</span><span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">)</span>\n<span class=\"go\">*- TypeError: the list to reduce cannot be empty -*</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">function</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">_T</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">_T</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">_T</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">_T</span>:</span></span>", "funcdef": "def"}, "magic_list.list.fold": {"fullname": "magic_list.list.fold", "modulename": "magic_list", "qualname": "list.fold", "kind": "function", "doc": "<p>\"Insert\" an operator (called a reducing function) between each element\nfrom left to right and return the result.</p>\n\n<p>The <code>initial_value</code> is used as the leftmost value, and is the returned\nvalue if the list is empty.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">fold</span><span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">)</span>  <span class=\"c1\"># ((-3 + 3) + 5) + 2</span>\n<span class=\"go\">7</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">list</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">fold</span><span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">function</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">_T</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">_T</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">_T</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">initial_value</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">_T</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">_T</span>:</span></span>", "funcdef": "def"}, "magic_list.list.fold_right": {"fullname": "magic_list.list.fold_right", "modulename": "magic_list", "qualname": "list.fold_right", "kind": "function", "doc": "<p>\"Insert\" an operator (called a reducing function) between each element\nfrom right to left and return the result.</p>\n\n<p>The <code>initial_value</code> is used as the leftmost value, and is the\nreturned value if the list is empty.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">fold_right</span><span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">)</span>  <span class=\"c1\"># -3 - (3 - (5 - 2))</span>\n<span class=\"go\">0</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">list</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">fold_right</span><span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">function</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">_T</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">_T</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">_T</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">initial_value</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">_T</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">_T</span>:</span></span>", "funcdef": "def"}, "magic_list.list.scan": {"fullname": "magic_list.list.scan", "modulename": "magic_list", "qualname": "list.scan", "kind": "function", "doc": "<p>\"Insert\" an operator (called a reducing function) between each element\nfrom left to right and return the intermediate values followed by the\nresult.</p>\n\n<p>The <code>initial_value</code> is used as the leftmost value, and is the only\nvalue of the returned list if the original list is empty.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">scan</span><span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># [0, (0 + 3), (0 + 3 + 5), (0 + 3 + 5 + 2)]</span>\n<span class=\"go\">[0, 3, 8, 10]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">list</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">scan</span><span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">[0]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">function</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">_T</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">_T</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">_T</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">initial_value</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">_T</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;typing_extensions.Self&#39;</span>:</span></span>", "funcdef": "def"}, "magic_list.list.scan_right": {"fullname": "magic_list.list.scan_right", "modulename": "magic_list", "qualname": "list.scan_right", "kind": "function", "doc": "<p>\"Insert\" an operator (called a reducing function) between each element\nfrom right to left and return the intermediate values followed by the\nresult.</p>\n\n<p>The <code>initial_value</code> is used as the leftmost value, and is the only\nvalue of the returned list if the original list is empty.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">scan_right</span><span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># [0, (2 + 0), (5 + 2 + 0), (3 + 5 + 2 + 0)]</span>\n<span class=\"go\">[0, 2, 7, 10]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">list</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">scan_right</span><span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">[0]</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">function</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">_T</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">_T</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">_T</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">initial_value</span><span class=\"p\">:</span> <span class=\"o\">~</span><span class=\"n\">_T</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;typing_extensions.Self&#39;</span>:</span></span>", "funcdef": "def"}, "magic_list.list.merge": {"fullname": "magic_list.list.merge", "modulename": "magic_list", "qualname": "list.merge", "kind": "function", "doc": "<p>Build a new list from the result of each <code>function(s_i, o_i)</code> where\n<code>s_i</code> and <code>o_i</code> are the items at index <code>i</code> of <code>self</code> and <code>other</code>\nrespectively.</p>\n\n<div class=\"pdoc-alert pdoc-alert-warning\">\n\n<h6 id=\"the-list-and-the-sequence-must-have-the-same-length\">The list and the sequence must have the same length.</h6>\n\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">9</span><span class=\"p\">])</span>\n<span class=\"go\">[2, 9, -7]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">list</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">,</span> <span class=\"p\">[])</span>\n<span class=\"go\">[]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">merge</span><span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">])</span>\n<span class=\"go\">*- TypeError: the length of the two sequences must be equal -*</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">function</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">_T</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">_U</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">_V</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">other</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">_U</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">magic_list</span><span class=\"o\">.</span><span class=\"n\">prelude</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">_V</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "magic_list.list.flatten": {"fullname": "magic_list.list.flatten", "modulename": "magic_list", "qualname": "list.flatten", "kind": "function", "doc": "<p>Flatten the contents to a 1-dimension list. If the list contains\nitself, it cannot be flattened and a <code>ValueError</code> is raised.</p>\n\n<div class=\"pdoc-alert pdoc-alert-warning\">\n\n<h6 id=\"the-list-cannot-contain-recursive-elements\">The list cannot contain recursive elements.</h6>\n\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">]]</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">()</span>\n<span class=\"go\">[3, 5, 2, 8, 4, 1, 7, 6, 9]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">list</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">()</span>\n<span class=\"go\">[]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">l</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">l</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">l</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">()</span>\n<span class=\"go\">*- ValueError: cannot flatten list because it contains recursive elements -*</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">_base</span><span class=\"p\">:</span> <span class=\"n\">magic_list</span><span class=\"o\">.</span><span class=\"n\">prelude</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">magic_list</span><span class=\"o\">.</span><span class=\"n\">prelude</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "magic_list.list.sum": {"fullname": "magic_list.list.sum", "modulename": "magic_list", "qualname": "list.sum", "kind": "function", "doc": "<p>Return the sum of the list. The elements must support addition,\notherwise an exception is raised.</p>\n\n<div class=\"pdoc-alert pdoc-alert-warning\">\n\n<h6 id=\"the-list-must-contain-values-that-support-the-operator-and-be-non-empty\">The list must contain values that support the <code>+</code> operator, and be non-empty.</h6>\n\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>\n<span class=\"go\">10</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"s2\">&quot;hello&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;world&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>\n<span class=\"go\">&quot;helloworld&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">list</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>\n<span class=\"go\">*- TypeError: cannot perform summation on an empty list -*</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"o\">~</span><span class=\"n\">_T</span>:</span></span>", "funcdef": "def"}, "magic_list.list.mean": {"fullname": "magic_list.list.mean", "modulename": "magic_list", "qualname": "list.mean", "kind": "function", "doc": "<p>Return the mean of the list. The elements must be numbers.</p>\n\n<div class=\"pdoc-alert pdoc-alert-warning\">\n\n<h6 id=\"the-list-must-contain-numbers-and-be-non-empty\">The list must contain numbers and be non-empty.</h6>\n\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span>\n<span class=\"go\">3.3333333333333335</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"s2\">&quot;hello&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;world&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span>\n<span class=\"go\">*- TypeError: cannot calculate mean of list of str -*</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">list</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span>\n<span class=\"go\">*- TypeError: cannot calculate mean of empty list -*</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">magic_list</span><span class=\"o\">.</span><span class=\"n\">prelude</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">_NumberT</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">_NumberT</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, "magic_list.list.fill_left": {"fullname": "magic_list.list.fill_left", "modulename": "magic_list", "qualname": "list.fill_left", "kind": "function", "doc": "<p>Fill on the left the list with <code>filler</code> and return the result.</p>\n\n<p>If <code>filler</code> is a function, it takes the current list (at the current\nfilling iteration) and produces a new value to be appended.</p>\n\n<div class=\"pdoc-alert pdoc-alert-warning\">\n\n<h6 id=\"n-must-be-non-negative\"><code>n</code> must be non-negative.</h6>\n\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">fill_left</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"go\">[0, 0, 0, 0, 0, 3, 5, 2]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">fill_left</span><span class=\"p\">(</span><span class=\"nb\">sum</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"go\">[40, 20, 10, 3, 5, 2]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">list</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">fill_left</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"go\">[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">fill_left</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">*- ValueError: the number of times to fill cannot be negative -*</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">filler</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">_T</span><span class=\"p\">,</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">magic_list</span><span class=\"o\">.</span><span class=\"n\">prelude</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">_T</span><span class=\"p\">]],</span> <span class=\"o\">~</span><span class=\"n\">_T</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;typing_extensions.Self&#39;</span>:</span></span>", "funcdef": "def"}, "magic_list.list.fill_right": {"fullname": "magic_list.list.fill_right", "modulename": "magic_list", "qualname": "list.fill_right", "kind": "function", "doc": "<p>Fill on the right the list with <code>filler</code> and return the result.</p>\n\n<p>If <code>filler</code> is a function, it takes the current list (at the current\nfilling iteration) and produces a new value to be appended.</p>\n\n<div class=\"pdoc-alert pdoc-alert-warning\">\n\n<h6 id=\"n-must-be-non-negative\"><code>n</code> must be non-negative.</h6>\n\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">fill_right</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"go\">[3, 5, 2, 0, 0, 0, 0, 0]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">fill_right</span><span class=\"p\">(</span><span class=\"nb\">sum</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"go\">[3, 5, 2, 10, 20, 40]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">list</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">fill_right</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"go\">[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">fill_right</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">*- ValueError: the number of times to fill cannot be negative -*</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">filler</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">_T</span><span class=\"p\">,</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">magic_list</span><span class=\"o\">.</span><span class=\"n\">prelude</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">_T</span><span class=\"p\">]],</span> <span class=\"o\">~</span><span class=\"n\">_T</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;typing_extensions.Self&#39;</span>:</span></span>", "funcdef": "def"}, "magic_list.list.interleave": {"fullname": "magic_list.list.interleave", "modulename": "magic_list", "qualname": "list.interleave", "kind": "function", "doc": "<p>Fill in-between the items with <code>filler</code> and return the result.</p>\n\n<p>If <code>filler</code> is a function, it takes the two items surrounding the gap\nthat is about to be filled and produces a new value to be inserted.</p>\n\n<div class=\"pdoc-alert pdoc-alert-warning\">\n\n<h6 id=\"the-list-must-be-non-empty\">The list must be non-empty.</h6>\n\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">interleave</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">[3, 0, 5, 0, 2]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">interleave</span><span class=\"p\">(</span><span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">)</span>\n<span class=\"go\">[3, 8, 5, 7, 2]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">list</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">interleave</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">*- ValueError: empty list has no gap to be filled -*</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">filler</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">_T</span><span class=\"p\">,</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">_T</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">_T</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">_T</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;typing_extensions.Self&#39;</span>:</span></span>", "funcdef": "def"}, "magic_list.list.gap_fill": {"fullname": "magic_list.list.gap_fill", "modulename": "magic_list", "qualname": "list.gap_fill", "kind": "function", "doc": "<div class=\"pdoc-alert pdoc-alert-warning\">\n\n<h6 id=\"this-alias-is-deprecated\">This alias is deprecated.</h6>\n\n</div>\n\n<p>Alias of <code>interleave</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">filler</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">_T</span><span class=\"p\">,</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"o\">~</span><span class=\"n\">_T</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">_T</span><span class=\"p\">],</span> <span class=\"o\">~</span><span class=\"n\">_T</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;typing_extensions.Self&#39;</span>:</span></span>", "funcdef": "def"}, "magic_list.list.select": {"fullname": "magic_list.list.select", "modulename": "magic_list", "qualname": "list.select", "kind": "function", "doc": "<p>Select items at provided indexes. If an index is present several\ntimes, this will be reflected in the resulting list.</p>\n\n<div class=\"pdoc-alert pdoc-alert-warning\">\n\n<h6 id=\"all-the-indexes-must-be-in-bounds\">All the indexes must be in bounds.</h6>\n\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"go\">[5, 2, 3, 3]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">list</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">([])</span>\n<span class=\"go\">[]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">([</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"go\">*- IndexError: index 4 is out of bounds -*</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">indexes</span><span class=\"p\">:</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;typing_extensions.Self&#39;</span>:</span></span>", "funcdef": "def"}, "magic_list.list.take": {"fullname": "magic_list.list.take", "modulename": "magic_list", "qualname": "list.take", "kind": "function", "doc": "<p>Take <code>n</code> items from the list and return them.</p>\n\n<div class=\"pdoc-alert pdoc-alert-warning\">\n\n<h6 id=\"n-must-be-non-negative-and-less-than-the-list-length\"><code>n</code> must be non-negative and less than the list length.</h6>\n\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">[3, 5]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">[]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">*- ValueError: cannot take a negative amount of items -*</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">take</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"go\">*- ValueError: cannot take more items than the list contains -*</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;typing_extensions.Self&#39;</span>:</span></span>", "funcdef": "def"}, "magic_list.list.take_right": {"fullname": "magic_list.list.take_right", "modulename": "magic_list", "qualname": "list.take_right", "kind": "function", "doc": "<p>Take <code>n</code> items from the right of the list and return them.</p>\n\n<p>List original order is preserved.</p>\n\n<div class=\"pdoc-alert pdoc-alert-warning\">\n\n<h6 id=\"n-must-be-non-negative-and-less-than-the-list-length\"><code>n</code> must be non-negative and less than the list length.</h6>\n\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">take_right</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">[5, 2]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">take_right</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">[]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">take_right</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">*- ValueError: cannot take a negative amount of items -*</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">take_right</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"go\">*- ValueError: cannot take more items than the list contains -*</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;typing_extensions.Self&#39;</span>:</span></span>", "funcdef": "def"}, "magic_list.list.drop": {"fullname": "magic_list.list.drop", "modulename": "magic_list", "qualname": "list.drop", "kind": "function", "doc": "<p>Drop <code>n</code> items from the list and return the rest.</p>\n\n<div class=\"pdoc-alert pdoc-alert-warning\">\n\n<h6 id=\"n-must-be-non-negative-and-less-than-the-list-length\"><code>n</code> must be non-negative and less than the list length.</h6>\n\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">[2]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">[3, 5, 2]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">*- ValueError: cannot drop a negative amount of items -*</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">drop</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"go\">*- ValueError: cannot drop more items than the list contains -*</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;typing_extensions.Self&#39;</span>:</span></span>", "funcdef": "def"}, "magic_list.list.drop_right": {"fullname": "magic_list.list.drop_right", "modulename": "magic_list", "qualname": "list.drop_right", "kind": "function", "doc": "<p>Drop <code>n</code> items from the right of the list and return the rest.</p>\n\n<div class=\"pdoc-alert pdoc-alert-warning\">\n\n<h6 id=\"n-must-be-non-negative-and-less-than-the-list-length\"><code>n</code> must be non-negative and less than the list length.</h6>\n\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">drop_right</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">[3]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">drop_right</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">[3, 5, 2]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">drop_right</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">*- ValueError: cannot drop a negative amount of items -*</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">drop_right</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"go\">*- ValueError: cannot drop more items than the list contains -*</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;typing_extensions.Self&#39;</span>:</span></span>", "funcdef": "def"}, "magic_list.list.slice": {"fullname": "magic_list.list.slice", "modulename": "magic_list", "qualname": "list.slice", "kind": "function", "doc": "<p>Slice the list from <code>start</code> to <code>stop</code> and return the result.</p>\n\n<p>This method is NOT equivalent to the <code>self[start:stop]</code> notation.\nIf <code>start</code> or <code>stop</code> are out of bounds of the list or <code>start</code> is\ngreater than <code>stop</code>, it will raise an exception.</p>\n\n<div class=\"pdoc-alert pdoc-alert-warning\">\n\n<h6 id=\"start-and-stop-must-be-in-bounds\"><code>start</code> and <code>stop</code> must be in bounds.</h6>\n\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">slice</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"go\">[4, 8, 16]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">slice</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">[2, 4, 8]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">slice</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"go\">[8, 16, 32]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">slice</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">[8]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">slice</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"go\">*- ValueError: slice out of bounds -*</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">slice</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">*- ValueError: start cannot be greater than stop -*</span>\n</code></pre>\n</div>\n\n<p>Tip: if <code>start</code> is 0, you can do <code>.take(stop - 1)</code> instead.\nSymmetrically, if <code>stop</code> is the index of the last item, go for a\n<code>.drop(start)</code>!</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">stop</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;typing_extensions.Self&#39;</span>:</span></span>", "funcdef": "def"}, "magic_list.list.partition": {"fullname": "magic_list.list.partition", "modulename": "magic_list", "qualname": "list.partition", "kind": "function", "doc": "<p>Return the element at index <code>index</code>, but also the two list slices\nbefore and after that element, in this order: (left, element, right).</p>\n\n<div class=\"pdoc-alert pdoc-alert-warning\">\n\n<h6 id=\"the-list-must-be-non-empty-and-the-partition-index-in-bounds\">The list must be non-empty, and the partition index in bounds.</h6>\n\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">partition</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">([2, 4], 8, [16, 32])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">partition</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">([], 2, [4, 8, 16, 32])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">partition</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"go\">([2, 4, 8, 16], 32, [])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">partition</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">*- IndexError: partition index cannot be out of bounds -*</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">list</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">partition</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">*- TypeError: cannot partition an empty list -*</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;tuple[typing_extensions.Self, _T, typing_extensions.Self]&#39;</span>:</span></span>", "funcdef": "def"}, "magic_list.list.bisect": {"fullname": "magic_list.list.bisect", "modulename": "magic_list", "qualname": "list.bisect", "kind": "function", "doc": "<p>Bisect the list after <code>index</code> elements and return a pair of the produced\nlists.</p>\n\n<div class=\"pdoc-alert pdoc-alert-warning\">\n\n<h6 id=\"the-list-must-be-non-empty\">The list must be non-empty.</h6>\n\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">bisect</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">([2, 4], [8, 16, 32])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">bisect</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">([], [2, 4, 8, 16, 32])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">bisect</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">)</span>\n<span class=\"go\">([2, 4, 8, 16, 32], [])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">L</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">32</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">bisect</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"go\">([], [2, 4, 8, 16, 32])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">list</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">bisect</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"go\">*- TypeError: cannot bisect an empty list -*</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;tuple[typing_extensions.Self, typing_extensions.Self]&#39;</span>:</span></span>", "funcdef": "def"}, "magic_list.list.trisect": {"fullname": "magic_list.list.trisect", "modulename": "magic_list", "qualname": "list.trisect", "kind": "function", "doc": "<p>Trisect the list at <code>first_index</code> and <code>second_index</code> and return a\ntriple of the produced lists.</p>\n\n<p>The left and right cutting indexes are determined by the smallest and\nlargest value of the two arguments respectively ; <code>first_index</code> is not\nrequired to be smaller.</p>\n\n<div class=\"pdoc-alert pdoc-alert-warning\">\n\n<h6 id=\"the-list-must-be-non-empty\">The list must be non-empty.</h6>\n\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">first_index</span><span class=\"p\">:</span> <span class=\"nb\">int</span>,</span><span class=\"param\">\t<span class=\"n\">second_index</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"s1\">&#39;tuple[typing_extensions.Self, typing_extensions.Self, typing_extensions.Self]&#39;</span>:</span></span>", "funcdef": "def"}, "magic_list.L": {"fullname": "magic_list.L", "modulename": "magic_list", "qualname": "L", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;magic_list.prelude._ListBuilder object&gt;"}}, "docInfo": {"magic_list": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 84}, "magic_list.list": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 17}, "magic_list.list.head": {"qualname": 2, "fullname": 4, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 94}, "magic_list.list.tail": {"qualname": 2, "fullname": 4, "annotation": 7, "default_value": 0, "signature": 0, "bases": 0, "doc": 95}, "magic_list.list.init": {"qualname": 2, "fullname": 4, "annotation": 7, "default_value": 0, "signature": 0, "bases": 0, "doc": 95}, "magic_list.list.last": {"qualname": 2, "fullname": 4, "annotation": 3, "default_value": 0, "signature": 0, "bases": 0, "doc": 94}, "magic_list.list.prepend": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 106}, "magic_list.list.reversed": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 61}, "magic_list.list.sorted": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 74, "bases": 0, "doc": 116}, "magic_list.list.shuffled": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 124}, "magic_list.list.map": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 74, "bases": 0, "doc": 178}, "magic_list.list.rotate": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 37, "bases": 0, "doc": 221}, "magic_list.list.filter": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 57, "bases": 0, "doc": 222}, "magic_list.list.mask": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 49, "bases": 0, "doc": 208}, "magic_list.list.deduplicate": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 172}, "magic_list.list.reduce": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 64, "bases": 0, "doc": 170}, "magic_list.list.reduce_right": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 64, "bases": 0, "doc": 229}, "magic_list.list.fold": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 81, "bases": 0, "doc": 163}, "magic_list.list.fold_right": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 81, "bases": 0, "doc": 163}, "magic_list.list.scan": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 84, "bases": 0, "doc": 183}, "magic_list.list.scan_right": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 84, "bases": 0, "doc": 185}, "magic_list.list.merge": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 113, "bases": 0, "doc": 255}, "magic_list.list.flatten": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 90, "bases": 0, "doc": 231}, "magic_list.list.sum": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 17, "bases": 0, "doc": 167}, "magic_list.list.mean": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 54, "bases": 0, "doc": 160}, "magic_list.list.fill_left": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 99, "bases": 0, "doc": 290}, "magic_list.list.fill_right": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 99, "bases": 0, "doc": 290}, "magic_list.list.interleave": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 82, "bases": 0, "doc": 209}, "magic_list.list.gap_fill": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 82, "bases": 0, "doc": 19}, "magic_list.list.select": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 46, "bases": 0, "doc": 193}, "magic_list.list.take": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 30, "bases": 0, "doc": 240}, "magic_list.list.take_right": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 30, "bases": 0, "doc": 255}, "magic_list.list.drop": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 30, "bases": 0, "doc": 242}, "magic_list.list.drop_right": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 30, "bases": 0, "doc": 249}, "magic_list.list.slice": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 40, "bases": 0, "doc": 518}, "magic_list.list.partition": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 36, "bases": 0, "doc": 345}, "magic_list.list.bisect": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 328}, "magic_list.list.trisect": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 51, "bases": 0, "doc": 69}, "magic_list.L": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 9, "signature": 0, "bases": 0, "doc": 3}}, "length": 39, "save": true}, "index": {"qualname": {"root": {"docs": {}, "df": 0, "l": {"docs": {"magic_list.L": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list": {"tf": 1}, "magic_list.list.head": {"tf": 1}, "magic_list.list.tail": {"tf": 1}, "magic_list.list.init": {"tf": 1}, "magic_list.list.last": {"tf": 1}, "magic_list.list.prepend": {"tf": 1}, "magic_list.list.reversed": {"tf": 1}, "magic_list.list.sorted": {"tf": 1}, "magic_list.list.shuffled": {"tf": 1}, "magic_list.list.map": {"tf": 1}, "magic_list.list.rotate": {"tf": 1}, "magic_list.list.filter": {"tf": 1}, "magic_list.list.mask": {"tf": 1}, "magic_list.list.deduplicate": {"tf": 1}, "magic_list.list.reduce": {"tf": 1}, "magic_list.list.reduce_right": {"tf": 1}, "magic_list.list.fold": {"tf": 1}, "magic_list.list.fold_right": {"tf": 1}, "magic_list.list.scan": {"tf": 1}, "magic_list.list.scan_right": {"tf": 1}, "magic_list.list.merge": {"tf": 1}, "magic_list.list.flatten": {"tf": 1}, "magic_list.list.sum": {"tf": 1}, "magic_list.list.mean": {"tf": 1}, "magic_list.list.fill_left": {"tf": 1}, "magic_list.list.fill_right": {"tf": 1}, "magic_list.list.interleave": {"tf": 1}, "magic_list.list.gap_fill": {"tf": 1}, "magic_list.list.select": {"tf": 1}, "magic_list.list.take": {"tf": 1}, "magic_list.list.take_right": {"tf": 1}, "magic_list.list.drop": {"tf": 1}, "magic_list.list.drop_right": {"tf": 1}, "magic_list.list.slice": {"tf": 1}, "magic_list.list.partition": {"tf": 1}, "magic_list.list.bisect": {"tf": 1}, "magic_list.list.trisect": {"tf": 1}}, "df": 37}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list.last": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list.fill_left": {"tf": 1}}, "df": 1}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"magic_list.list.head": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {"magic_list.list.tail": {"tf": 1}}, "df": 1}}, "k": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list.take": {"tf": 1}, "magic_list.list.take_right": {"tf": 1}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list.trisect": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list.init": {"tf": 1}}, "df": 1}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list.interleave": {"tf": 1}}, "df": 1}}}}}}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"magic_list.list.prepend": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"magic_list.list.partition": {"tf": 1}}, "df": 1}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"magic_list.list.reversed": {"tf": 1}}, "df": 1}}}}}}, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list.reduce": {"tf": 1}, "magic_list.list.reduce_right": {"tf": 1}}, "df": 2}}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list.rotate": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list.reduce_right": {"tf": 1}, "magic_list.list.fold_right": {"tf": 1}, "magic_list.list.scan_right": {"tf": 1}, "magic_list.list.fill_right": {"tf": 1}, "magic_list.list.take_right": {"tf": 1}, "magic_list.list.drop_right": {"tf": 1}}, "df": 6}}}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"magic_list.list.sorted": {"tf": 1}}, "df": 1}}}}}, "h": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"magic_list.list.shuffled": {"tf": 1}}, "df": 1}}}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"magic_list.list.scan": {"tf": 1}, "magic_list.list.scan_right": {"tf": 1}}, "df": 2}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {"magic_list.list.sum": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list.select": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list.slice": {"tf": 1}}, "df": 1}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"magic_list.list.map": {"tf": 1}}, "df": 1}, "s": {"docs": {}, "df": 0, "k": {"docs": {"magic_list.list.mask": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list.merge": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"magic_list.list.mean": {"tf": 1}}, "df": 1}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"magic_list.list.filter": {"tf": 1}}, "df": 1}}}, "l": {"docs": {"magic_list.list.fill_left": {"tf": 1}, "magic_list.list.fill_right": {"tf": 1}, "magic_list.list.gap_fill": {"tf": 1}}, "df": 3}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"magic_list.list.fold": {"tf": 1}, "magic_list.list.fold_right": {"tf": 1}}, "df": 2}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"magic_list.list.flatten": {"tf": 1}}, "df": 1}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list.deduplicate": {"tf": 1}}, "df": 1}}}}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"magic_list.list.drop": {"tf": 1}, "magic_list.list.drop_right": {"tf": 1}}, "df": 2}}}}, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"magic_list.list.gap_fill": {"tf": 1}}, "df": 1}}}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list.bisect": {"tf": 1}}, "df": 1}}}}}}}}, "fullname": {"root": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"magic_list": {"tf": 1}, "magic_list.list": {"tf": 1}, "magic_list.list.head": {"tf": 1}, "magic_list.list.tail": {"tf": 1}, "magic_list.list.init": {"tf": 1}, "magic_list.list.last": {"tf": 1}, "magic_list.list.prepend": {"tf": 1}, "magic_list.list.reversed": {"tf": 1}, "magic_list.list.sorted": {"tf": 1}, "magic_list.list.shuffled": {"tf": 1}, "magic_list.list.map": {"tf": 1}, "magic_list.list.rotate": {"tf": 1}, "magic_list.list.filter": {"tf": 1}, "magic_list.list.mask": {"tf": 1}, "magic_list.list.deduplicate": {"tf": 1}, "magic_list.list.reduce": {"tf": 1}, "magic_list.list.reduce_right": {"tf": 1}, "magic_list.list.fold": {"tf": 1}, "magic_list.list.fold_right": {"tf": 1}, "magic_list.list.scan": {"tf": 1}, "magic_list.list.scan_right": {"tf": 1}, "magic_list.list.merge": {"tf": 1}, "magic_list.list.flatten": {"tf": 1}, "magic_list.list.sum": {"tf": 1}, "magic_list.list.mean": {"tf": 1}, "magic_list.list.fill_left": {"tf": 1}, "magic_list.list.fill_right": {"tf": 1}, "magic_list.list.interleave": {"tf": 1}, "magic_list.list.gap_fill": {"tf": 1}, "magic_list.list.select": {"tf": 1}, "magic_list.list.take": {"tf": 1}, "magic_list.list.take_right": {"tf": 1}, "magic_list.list.drop": {"tf": 1}, "magic_list.list.drop_right": {"tf": 1}, "magic_list.list.slice": {"tf": 1}, "magic_list.list.partition": {"tf": 1}, "magic_list.list.bisect": {"tf": 1}, "magic_list.list.trisect": {"tf": 1}, "magic_list.L": {"tf": 1}}, "df": 39}}}, "p": {"docs": {"magic_list.list.map": {"tf": 1}}, "df": 1}, "s": {"docs": {}, "df": 0, "k": {"docs": {"magic_list.list.mask": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list.merge": {"tf": 1}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"magic_list.list.mean": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {"magic_list.L": {"tf": 1}}, "df": 1, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"magic_list": {"tf": 1}, "magic_list.list": {"tf": 1.4142135623730951}, "magic_list.list.head": {"tf": 1.4142135623730951}, "magic_list.list.tail": {"tf": 1.4142135623730951}, "magic_list.list.init": {"tf": 1.4142135623730951}, "magic_list.list.last": {"tf": 1.4142135623730951}, "magic_list.list.prepend": {"tf": 1.4142135623730951}, "magic_list.list.reversed": {"tf": 1.4142135623730951}, "magic_list.list.sorted": {"tf": 1.4142135623730951}, "magic_list.list.shuffled": {"tf": 1.4142135623730951}, "magic_list.list.map": {"tf": 1.4142135623730951}, "magic_list.list.rotate": {"tf": 1.4142135623730951}, "magic_list.list.filter": {"tf": 1.4142135623730951}, "magic_list.list.mask": {"tf": 1.4142135623730951}, "magic_list.list.deduplicate": {"tf": 1.4142135623730951}, "magic_list.list.reduce": {"tf": 1.4142135623730951}, "magic_list.list.reduce_right": {"tf": 1.4142135623730951}, "magic_list.list.fold": {"tf": 1.4142135623730951}, "magic_list.list.fold_right": {"tf": 1.4142135623730951}, "magic_list.list.scan": {"tf": 1.4142135623730951}, "magic_list.list.scan_right": {"tf": 1.4142135623730951}, "magic_list.list.merge": {"tf": 1.4142135623730951}, "magic_list.list.flatten": {"tf": 1.4142135623730951}, "magic_list.list.sum": {"tf": 1.4142135623730951}, "magic_list.list.mean": {"tf": 1.4142135623730951}, "magic_list.list.fill_left": {"tf": 1.4142135623730951}, "magic_list.list.fill_right": {"tf": 1.4142135623730951}, "magic_list.list.interleave": {"tf": 1.4142135623730951}, "magic_list.list.gap_fill": {"tf": 1.4142135623730951}, "magic_list.list.select": {"tf": 1.4142135623730951}, "magic_list.list.take": {"tf": 1.4142135623730951}, "magic_list.list.take_right": {"tf": 1.4142135623730951}, "magic_list.list.drop": {"tf": 1.4142135623730951}, "magic_list.list.drop_right": {"tf": 1.4142135623730951}, "magic_list.list.slice": {"tf": 1.4142135623730951}, "magic_list.list.partition": {"tf": 1.4142135623730951}, "magic_list.list.bisect": {"tf": 1.4142135623730951}, "magic_list.list.trisect": {"tf": 1.4142135623730951}, "magic_list.L": {"tf": 1}}, "df": 39}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list.last": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list.fill_left": {"tf": 1}}, "df": 1}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"magic_list.list.head": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {"magic_list.list.tail": {"tf": 1}}, "df": 1}}, "k": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list.take": {"tf": 1}, "magic_list.list.take_right": {"tf": 1}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list.trisect": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list.init": {"tf": 1}}, "df": 1}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list.interleave": {"tf": 1}}, "df": 1}}}}}}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"magic_list.list.prepend": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"magic_list.list.partition": {"tf": 1}}, "df": 1}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"magic_list.list.reversed": {"tf": 1}}, "df": 1}}}}}}, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list.reduce": {"tf": 1}, "magic_list.list.reduce_right": {"tf": 1}}, "df": 2}}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list.rotate": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list.reduce_right": {"tf": 1}, "magic_list.list.fold_right": {"tf": 1}, "magic_list.list.scan_right": {"tf": 1}, "magic_list.list.fill_right": {"tf": 1}, "magic_list.list.take_right": {"tf": 1}, "magic_list.list.drop_right": {"tf": 1}}, "df": 6}}}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"magic_list.list.sorted": {"tf": 1}}, "df": 1}}}}}, "h": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"magic_list.list.shuffled": {"tf": 1}}, "df": 1}}}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"magic_list.list.scan": {"tf": 1}, "magic_list.list.scan_right": {"tf": 1}}, "df": 2}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {"magic_list.list.sum": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list.select": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list.slice": {"tf": 1}}, "df": 1}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"magic_list.list.filter": {"tf": 1}}, "df": 1}}}, "l": {"docs": {"magic_list.list.fill_left": {"tf": 1}, "magic_list.list.fill_right": {"tf": 1}, "magic_list.list.gap_fill": {"tf": 1}}, "df": 3}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"magic_list.list.fold": {"tf": 1}, "magic_list.list.fold_right": {"tf": 1}}, "df": 2}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"magic_list.list.flatten": {"tf": 1}}, "df": 1}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list.deduplicate": {"tf": 1}}, "df": 1}}}}}}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"magic_list.list.drop": {"tf": 1}, "magic_list.list.drop_right": {"tf": 1}}, "df": 2}}}}, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"magic_list.list.gap_fill": {"tf": 1}}, "df": 1}}}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list.bisect": {"tf": 1}}, "df": 1}}}}}}}}, "annotation": {"root": {"docs": {"magic_list.list.head": {"tf": 1.4142135623730951}, "magic_list.list.tail": {"tf": 1.4142135623730951}, "magic_list.list.init": {"tf": 1.4142135623730951}, "magic_list.list.last": {"tf": 1.4142135623730951}}, "df": 4, "t": {"docs": {"magic_list.list.head": {"tf": 1}, "magic_list.list.last": {"tf": 1}}, "df": 2, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"magic_list.list.tail": {"tf": 1}, "magic_list.list.init": {"tf": 1}}, "df": 2}}}}}}, "x": {"2": {"7": {"docs": {"magic_list.list.tail": {"tf": 1.4142135623730951}, "magic_list.list.init": {"tf": 1.4142135623730951}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"magic_list.list.tail": {"tf": 1}, "magic_list.list.init": {"tf": 1}}, "df": 2}}}}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "f": {"docs": {"magic_list.list.tail": {"tf": 1}, "magic_list.list.init": {"tf": 1}}, "df": 2}}}}}}, "default_value": {"root": {"docs": {"magic_list.L": {"tf": 1.4142135623730951}}, "df": 1, "l": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.L": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.L": {"tf": 1}}, "df": 1, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"magic_list.L": {"tf": 1}}, "df": 1}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"magic_list.L": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.L": {"tf": 1}}, "df": 1}}}}}}}, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.L": {"tf": 1}}, "df": 1}}}}}}, "g": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.L": {"tf": 1}}, "df": 1}}}}, "signature": {"root": {"1": {"docs": {"magic_list.list.rotate": {"tf": 1}}, "df": 1}, "3": {"9": {"docs": {"magic_list.list.reversed": {"tf": 1.4142135623730951}, "magic_list.list.sorted": {"tf": 2}, "magic_list.list.shuffled": {"tf": 1.4142135623730951}, "magic_list.list.rotate": {"tf": 1.4142135623730951}, "magic_list.list.filter": {"tf": 1.4142135623730951}, "magic_list.list.mask": {"tf": 1.4142135623730951}, "magic_list.list.deduplicate": {"tf": 1.4142135623730951}, "magic_list.list.scan": {"tf": 1.4142135623730951}, "magic_list.list.scan_right": {"tf": 1.4142135623730951}, "magic_list.list.fill_left": {"tf": 1.4142135623730951}, "magic_list.list.fill_right": {"tf": 1.4142135623730951}, "magic_list.list.interleave": {"tf": 1.4142135623730951}, "magic_list.list.gap_fill": {"tf": 1.4142135623730951}, "magic_list.list.select": {"tf": 1.4142135623730951}, "magic_list.list.take": {"tf": 1.4142135623730951}, "magic_list.list.take_right": {"tf": 1.4142135623730951}, "magic_list.list.drop": {"tf": 1.4142135623730951}, "magic_list.list.drop_right": {"tf": 1.4142135623730951}, "magic_list.list.slice": {"tf": 1.4142135623730951}, "magic_list.list.partition": {"tf": 1.4142135623730951}, "magic_list.list.bisect": {"tf": 1.4142135623730951}, "magic_list.list.trisect": {"tf": 1.4142135623730951}}, "df": 22}, "docs": {}, "df": 0}, "docs": {"magic_list.list.prepend": {"tf": 4.795831523312719}, "magic_list.list.reversed": {"tf": 3.7416573867739413}, "magic_list.list.sorted": {"tf": 7.3484692283495345}, "magic_list.list.shuffled": {"tf": 3.7416573867739413}, "magic_list.list.map": {"tf": 7.874007874011811}, "magic_list.list.rotate": {"tf": 5.291502622129181}, "magic_list.list.filter": {"tf": 6.708203932499369}, "magic_list.list.mask": {"tf": 6.082762530298219}, "magic_list.list.deduplicate": {"tf": 3.7416573867739413}, "magic_list.list.reduce": {"tf": 7.416198487095663}, "magic_list.list.reduce_right": {"tf": 7.416198487095663}, "magic_list.list.fold": {"tf": 8.306623862918075}, "magic_list.list.fold_right": {"tf": 8.306623862918075}, "magic_list.list.scan": {"tf": 8.246211251235321}, "magic_list.list.scan_right": {"tf": 8.246211251235321}, "magic_list.list.merge": {"tf": 9.746794344808963}, "magic_list.list.flatten": {"tf": 8.602325267042627}, "magic_list.list.sum": {"tf": 3.872983346207417}, "magic_list.list.mean": {"tf": 6.708203932499369}, "magic_list.list.fill_left": {"tf": 8.888194417315589}, "magic_list.list.fill_right": {"tf": 8.888194417315589}, "magic_list.list.interleave": {"tf": 8.18535277187245}, "magic_list.list.gap_fill": {"tf": 8.18535277187245}, "magic_list.list.select": {"tf": 5.916079783099616}, "magic_list.list.take": {"tf": 4.69041575982343}, "magic_list.list.take_right": {"tf": 4.69041575982343}, "magic_list.list.drop": {"tf": 4.69041575982343}, "magic_list.list.drop_right": {"tf": 4.69041575982343}, "magic_list.list.slice": {"tf": 5.477225575051661}, "magic_list.list.partition": {"tf": 4.898979485566356}, "magic_list.list.bisect": {"tf": 4.898979485566356}, "magic_list.list.trisect": {"tf": 5.744562646538029}}, "df": 32, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "f": {"docs": {"magic_list.list.prepend": {"tf": 1}, "magic_list.list.reversed": {"tf": 1.4142135623730951}, "magic_list.list.sorted": {"tf": 1.4142135623730951}, "magic_list.list.shuffled": {"tf": 1.4142135623730951}, "magic_list.list.map": {"tf": 1}, "magic_list.list.rotate": {"tf": 1.4142135623730951}, "magic_list.list.filter": {"tf": 1.4142135623730951}, "magic_list.list.mask": {"tf": 1.4142135623730951}, "magic_list.list.deduplicate": {"tf": 1.4142135623730951}, "magic_list.list.reduce": {"tf": 1}, "magic_list.list.reduce_right": {"tf": 1}, "magic_list.list.fold": {"tf": 1}, "magic_list.list.fold_right": {"tf": 1}, "magic_list.list.scan": {"tf": 1.4142135623730951}, "magic_list.list.scan_right": {"tf": 1.4142135623730951}, "magic_list.list.merge": {"tf": 1}, "magic_list.list.flatten": {"tf": 1}, "magic_list.list.sum": {"tf": 1}, "magic_list.list.mean": {"tf": 1}, "magic_list.list.fill_left": {"tf": 1.4142135623730951}, "magic_list.list.fill_right": {"tf": 1.4142135623730951}, "magic_list.list.interleave": {"tf": 1.4142135623730951}, "magic_list.list.gap_fill": {"tf": 1.4142135623730951}, "magic_list.list.select": {"tf": 1.4142135623730951}, "magic_list.list.take": {"tf": 1.4142135623730951}, "magic_list.list.take_right": {"tf": 1.4142135623730951}, "magic_list.list.drop": {"tf": 1.4142135623730951}, "magic_list.list.drop_right": {"tf": 1.4142135623730951}, "magic_list.list.slice": {"tf": 1.4142135623730951}, "magic_list.list.partition": {"tf": 1.7320508075688772}, "magic_list.list.bisect": {"tf": 1.7320508075688772}, "magic_list.list.trisect": {"tf": 2}}, "df": 32}}, "q": {"docs": {"magic_list.list.mask": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list.mask": {"tf": 1}, "magic_list.list.merge": {"tf": 1}, "magic_list.list.select": {"tf": 1}}, "df": 3}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"magic_list.list.trisect": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"magic_list.list.sorted": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list.slice": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {"magic_list.list.slice": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {"magic_list.list.prepend": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list.rotate": {"tf": 1}, "magic_list.list.fill_left": {"tf": 1}, "magic_list.list.fill_right": {"tf": 1}, "magic_list.list.select": {"tf": 1}, "magic_list.list.take": {"tf": 1}, "magic_list.list.take_right": {"tf": 1}, "magic_list.list.drop": {"tf": 1}, "magic_list.list.drop_right": {"tf": 1}, "magic_list.list.slice": {"tf": 1.4142135623730951}, "magic_list.list.partition": {"tf": 1}, "magic_list.list.bisect": {"tf": 1}, "magic_list.list.trisect": {"tf": 1.4142135623730951}}, "df": 12}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"magic_list.list.fold": {"tf": 1}, "magic_list.list.fold_right": {"tf": 1}, "magic_list.list.scan": {"tf": 1}, "magic_list.list.scan_right": {"tf": 1}}, "df": 4}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"magic_list.list.partition": {"tf": 1}, "magic_list.list.bisect": {"tf": 1}, "magic_list.list.trisect": {"tf": 1.4142135623730951}}, "df": 3, "e": {"docs": {}, "df": 0, "s": {"docs": {"magic_list.list.select": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {"magic_list.list.prepend": {"tf": 1}, "magic_list.list.sorted": {"tf": 1}, "magic_list.list.map": {"tf": 1}, "magic_list.list.filter": {"tf": 1}, "magic_list.list.reduce": {"tf": 2}, "magic_list.list.reduce_right": {"tf": 2}, "magic_list.list.fold": {"tf": 2.23606797749979}, "magic_list.list.fold_right": {"tf": 2.23606797749979}, "magic_list.list.scan": {"tf": 2}, "magic_list.list.scan_right": {"tf": 2}, "magic_list.list.merge": {"tf": 1}, "magic_list.list.sum": {"tf": 1}, "magic_list.list.fill_left": {"tf": 1.7320508075688772}, "magic_list.list.fill_right": {"tf": 1.7320508075688772}, "magic_list.list.interleave": {"tf": 2}, "magic_list.list.gap_fill": {"tf": 2}, "magic_list.list.partition": {"tf": 1}}, "df": 17, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"magic_list.list.reversed": {"tf": 1}, "magic_list.list.sorted": {"tf": 1}, "magic_list.list.shuffled": {"tf": 1}, "magic_list.list.rotate": {"tf": 1}, "magic_list.list.filter": {"tf": 1}, "magic_list.list.mask": {"tf": 1}, "magic_list.list.deduplicate": {"tf": 1}, "magic_list.list.scan": {"tf": 1}, "magic_list.list.scan_right": {"tf": 1}, "magic_list.list.flatten": {"tf": 1.4142135623730951}, "magic_list.list.fill_left": {"tf": 1}, "magic_list.list.fill_right": {"tf": 1}, "magic_list.list.interleave": {"tf": 1}, "magic_list.list.gap_fill": {"tf": 1}, "magic_list.list.select": {"tf": 1}, "magic_list.list.take": {"tf": 1}, "magic_list.list.take_right": {"tf": 1}, "magic_list.list.drop": {"tf": 1}, "magic_list.list.drop_right": {"tf": 1}, "magic_list.list.slice": {"tf": 1}, "magic_list.list.partition": {"tf": 1}, "magic_list.list.bisect": {"tf": 1}, "magic_list.list.trisect": {"tf": 1.4142135623730951}}, "df": 23}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"magic_list.list.sorted": {"tf": 1}}, "df": 1}}}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "[": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"magic_list.list.partition": {"tf": 1}, "magic_list.list.bisect": {"tf": 1}, "magic_list.list.trisect": {"tf": 1}}, "df": 3}}}}}}}}}}}}, "n": {"docs": {"magic_list.list.rotate": {"tf": 1}, "magic_list.list.fill_left": {"tf": 1}, "magic_list.list.fill_right": {"tf": 1}, "magic_list.list.take": {"tf": 1}, "magic_list.list.take_right": {"tf": 1}, "magic_list.list.drop": {"tf": 1}, "magic_list.list.drop_right": {"tf": 1}}, "df": 7, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list.prepend": {"tf": 1}, "magic_list.list.sorted": {"tf": 1.4142135623730951}, "magic_list.list.flatten": {"tf": 1.4142135623730951}}, "df": 3}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list.mean": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"magic_list.list.reversed": {"tf": 1}, "magic_list.list.sorted": {"tf": 1}, "magic_list.list.shuffled": {"tf": 1}, "magic_list.list.rotate": {"tf": 1}, "magic_list.list.filter": {"tf": 1}, "magic_list.list.mask": {"tf": 1}, "magic_list.list.deduplicate": {"tf": 1}, "magic_list.list.scan": {"tf": 1}, "magic_list.list.scan_right": {"tf": 1}, "magic_list.list.fill_left": {"tf": 1}, "magic_list.list.fill_right": {"tf": 1}, "magic_list.list.interleave": {"tf": 1}, "magic_list.list.gap_fill": {"tf": 1}, "magic_list.list.select": {"tf": 1}, "magic_list.list.take": {"tf": 1}, "magic_list.list.take_right": {"tf": 1}, "magic_list.list.drop": {"tf": 1}, "magic_list.list.drop_right": {"tf": 1}, "magic_list.list.slice": {"tf": 1}, "magic_list.list.partition": {"tf": 1.4142135623730951}, "magic_list.list.bisect": {"tf": 1.4142135623730951}, "magic_list.list.trisect": {"tf": 1.7320508075688772}}, "df": 22}}}}}}}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {"magic_list.list.sorted": {"tf": 1}}, "df": 1}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"magic_list.list.sorted": {"tf": 1}, "magic_list.list.map": {"tf": 1}, "magic_list.list.filter": {"tf": 1}, "magic_list.list.mask": {"tf": 1}, "magic_list.list.reduce": {"tf": 1}, "magic_list.list.reduce_right": {"tf": 1}, "magic_list.list.fold": {"tf": 1}, "magic_list.list.fold_right": {"tf": 1}, "magic_list.list.scan": {"tf": 1}, "magic_list.list.scan_right": {"tf": 1}, "magic_list.list.merge": {"tf": 1.4142135623730951}, "magic_list.list.fill_left": {"tf": 1}, "magic_list.list.fill_right": {"tf": 1}, "magic_list.list.interleave": {"tf": 1}, "magic_list.list.gap_fill": {"tf": 1}, "magic_list.list.select": {"tf": 1}}, "df": 16}}}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list.sorted": {"tf": 1}, "magic_list.list.map": {"tf": 1}, "magic_list.list.filter": {"tf": 1}, "magic_list.list.reduce": {"tf": 1}, "magic_list.list.reduce_right": {"tf": 1}, "magic_list.list.fold": {"tf": 1}, "magic_list.list.fold_right": {"tf": 1}, "magic_list.list.scan": {"tf": 1}, "magic_list.list.scan_right": {"tf": 1}, "magic_list.list.merge": {"tf": 1}, "magic_list.list.fill_left": {"tf": 1}, "magic_list.list.fill_right": {"tf": 1}, "magic_list.list.interleave": {"tf": 1}, "magic_list.list.gap_fill": {"tf": 1}}, "df": 14}}}}}}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "c": {"docs": {"magic_list.list.sorted": {"tf": 1}, "magic_list.list.map": {"tf": 1}, "magic_list.list.filter": {"tf": 1}, "magic_list.list.mask": {"tf": 1}, "magic_list.list.reduce": {"tf": 1}, "magic_list.list.reduce_right": {"tf": 1}, "magic_list.list.fold": {"tf": 1}, "magic_list.list.fold_right": {"tf": 1}, "magic_list.list.scan": {"tf": 1}, "magic_list.list.scan_right": {"tf": 1}, "magic_list.list.merge": {"tf": 1.4142135623730951}, "magic_list.list.fill_left": {"tf": 1}, "magic_list.list.fill_right": {"tf": 1}, "magic_list.list.interleave": {"tf": 1}, "magic_list.list.gap_fill": {"tf": 1}, "magic_list.list.select": {"tf": 1}}, "df": 16}}, "n": {"docs": {}, "df": 0, "y": {"docs": {"magic_list.list.flatten": {"tf": 1.4142135623730951}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list.sorted": {"tf": 1}}, "df": 1}}}}}}}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"magic_list.list.sorted": {"tf": 1}, "magic_list.list.filter": {"tf": 1}, "magic_list.list.mask": {"tf": 1}}, "df": 3}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list.flatten": {"tf": 1}}, "df": 1}}}}, "f": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list.sorted": {"tf": 1}}, "df": 1}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"magic_list.list.map": {"tf": 1}, "magic_list.list.filter": {"tf": 1}, "magic_list.list.reduce": {"tf": 1}, "magic_list.list.reduce_right": {"tf": 1}, "magic_list.list.fold": {"tf": 1}, "magic_list.list.fold_right": {"tf": 1}, "magic_list.list.scan": {"tf": 1}, "magic_list.list.scan_right": {"tf": 1}, "magic_list.list.merge": {"tf": 1}}, "df": 9}}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list.mean": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"magic_list.list.fill_left": {"tf": 1}, "magic_list.list.fill_right": {"tf": 1}, "magic_list.list.interleave": {"tf": 1}, "magic_list.list.gap_fill": {"tf": 1}}, "df": 4}}}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list.trisect": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {"magic_list.list.map": {"tf": 1.4142135623730951}, "magic_list.list.merge": {"tf": 1.4142135623730951}}, "df": 2, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"magic_list.list.mean": {"tf": 1}, "magic_list.list.fill_left": {"tf": 1}, "magic_list.list.fill_right": {"tf": 1}, "magic_list.list.interleave": {"tf": 1}, "magic_list.list.gap_fill": {"tf": 1}}, "df": 5}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"magic_list.list.map": {"tf": 1}, "magic_list.list.merge": {"tf": 1}, "magic_list.list.flatten": {"tf": 1.4142135623730951}, "magic_list.list.mean": {"tf": 1}, "magic_list.list.fill_left": {"tf": 1}, "magic_list.list.fill_right": {"tf": 1}}, "df": 6}}}, "s": {"docs": {}, "df": 0, "k": {"docs": {"magic_list.list.mask": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list.map": {"tf": 1.4142135623730951}, "magic_list.list.merge": {"tf": 1.4142135623730951}, "magic_list.list.flatten": {"tf": 2}, "magic_list.list.mean": {"tf": 1.4142135623730951}, "magic_list.list.fill_left": {"tf": 1.4142135623730951}, "magic_list.list.fill_right": {"tf": 1.4142135623730951}}, "df": 6}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list.map": {"tf": 1}, "magic_list.list.merge": {"tf": 1}, "magic_list.list.flatten": {"tf": 1.4142135623730951}, "magic_list.list.mean": {"tf": 1}, "magic_list.list.fill_left": {"tf": 1}, "magic_list.list.fill_right": {"tf": 1}}, "df": 6}}}}}}}, "v": {"docs": {"magic_list.list.merge": {"tf": 1.4142135623730951}}, "df": 1, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list.fold": {"tf": 1}, "magic_list.list.fold_right": {"tf": 1}, "magic_list.list.scan": {"tf": 1}, "magic_list.list.scan_right": {"tf": 1}}, "df": 4}}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"magic_list.list.merge": {"tf": 1}}, "df": 1}}}}}}}, "bases": {"root": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"magic_list.list": {"tf": 1}}, "df": 1}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list": {"tf": 1}}, "df": 1}}}}}}}}, "t": {"docs": {"magic_list.list": {"tf": 1}}, "df": 1}}}, "doc": {"root": {"0": {"docs": {"magic_list.list.filter": {"tf": 1}, "magic_list.list.deduplicate": {"tf": 1.7320508075688772}, "magic_list.list.reduce_right": {"tf": 1}, "magic_list.list.fold": {"tf": 1.4142135623730951}, "magic_list.list.fold_right": {"tf": 1.7320508075688772}, "magic_list.list.scan": {"tf": 2.8284271247461903}, "magic_list.list.scan_right": {"tf": 2.8284271247461903}, "magic_list.list.fill_left": {"tf": 2.6457513110645907}, "magic_list.list.fill_right": {"tf": 2.6457513110645907}, "magic_list.list.interleave": {"tf": 2}, "magic_list.list.select": {"tf": 1.4142135623730951}, "magic_list.list.take": {"tf": 1}, "magic_list.list.take_right": {"tf": 1}, "magic_list.list.drop": {"tf": 1}, "magic_list.list.drop_right": {"tf": 1}, "magic_list.list.slice": {"tf": 1.4142135623730951}, "magic_list.list.partition": {"tf": 1}, "magic_list.list.bisect": {"tf": 1}}, "df": 18}, "1": {"0": {"docs": {"magic_list.list.map": {"tf": 1}, "magic_list.list.reduce": {"tf": 1}, "magic_list.list.reduce_right": {"tf": 1}, "magic_list.list.scan": {"tf": 1}, "magic_list.list.scan_right": {"tf": 1}, "magic_list.list.sum": {"tf": 1}, "magic_list.list.fill_left": {"tf": 1.4142135623730951}, "magic_list.list.fill_right": {"tf": 1.4142135623730951}, "magic_list.list.slice": {"tf": 1}}, "df": 9}, "6": {"docs": {"magic_list.list.slice": {"tf": 2.8284271247461903}, "magic_list.list.partition": {"tf": 2.6457513110645907}, "magic_list.list.bisect": {"tf": 2.8284271247461903}}, "df": 3}, "8": {"docs": {"magic_list.list.deduplicate": {"tf": 1.4142135623730951}}, "df": 1}, "docs": {"magic_list.list.reversed": {"tf": 1.4142135623730951}, "magic_list.list.rotate": {"tf": 1}, "magic_list.list.filter": {"tf": 1}, "magic_list.list.deduplicate": {"tf": 1.4142135623730951}, "magic_list.list.merge": {"tf": 1}, "magic_list.list.flatten": {"tf": 1.7320508075688772}, "magic_list.list.fill_left": {"tf": 3.4641016151377544}, "magic_list.list.fill_right": {"tf": 3.4641016151377544}, "magic_list.list.select": {"tf": 1.4142135623730951}, "magic_list.list.take": {"tf": 1}, "magic_list.list.take_right": {"tf": 1}, "magic_list.list.drop": {"tf": 1}, "magic_list.list.drop_right": {"tf": 1}, "magic_list.list.slice": {"tf": 1.7320508075688772}}, "df": 14}, "2": {"0": {"docs": {"magic_list.list.map": {"tf": 1}, "magic_list.list.fill_left": {"tf": 1}, "magic_list.list.fill_right": {"tf": 1}}, "df": 3}, "docs": {"magic_list.list.head": {"tf": 1}, "magic_list.list.tail": {"tf": 1.4142135623730951}, "magic_list.list.init": {"tf": 1}, "magic_list.list.last": {"tf": 1.4142135623730951}, "magic_list.list.prepend": {"tf": 2}, "magic_list.list.reversed": {"tf": 1.4142135623730951}, "magic_list.list.sorted": {"tf": 1.4142135623730951}, "magic_list.list.shuffled": {"tf": 2}, "magic_list.list.map": {"tf": 2}, "magic_list.list.rotate": {"tf": 2.6457513110645907}, "magic_list.list.filter": {"tf": 1.4142135623730951}, "magic_list.list.mask": {"tf": 1.7320508075688772}, "magic_list.list.reduce": {"tf": 1.4142135623730951}, "magic_list.list.reduce_right": {"tf": 2}, "magic_list.list.fold": {"tf": 1.4142135623730951}, "magic_list.list.fold_right": {"tf": 1.4142135623730951}, "magic_list.list.scan": {"tf": 1.4142135623730951}, "magic_list.list.scan_right": {"tf": 2.23606797749979}, "magic_list.list.merge": {"tf": 1.7320508075688772}, "magic_list.list.flatten": {"tf": 1.4142135623730951}, "magic_list.list.sum": {"tf": 1}, "magic_list.list.mean": {"tf": 1}, "magic_list.list.fill_left": {"tf": 2.23606797749979}, "magic_list.list.fill_right": {"tf": 2.23606797749979}, "magic_list.list.interleave": {"tf": 2}, "magic_list.list.select": {"tf": 2}, "magic_list.list.take": {"tf": 2.23606797749979}, "magic_list.list.take_right": {"tf": 2.449489742783178}, "magic_list.list.drop": {"tf": 2.6457513110645907}, "magic_list.list.drop_right": {"tf": 2.449489742783178}, "magic_list.list.slice": {"tf": 3.3166247903554}, "magic_list.list.partition": {"tf": 3.1622776601683795}, "magic_list.list.bisect": {"tf": 3.1622776601683795}}, "df": 33}, "3": {"2": {"docs": {"magic_list.list.slice": {"tf": 2.6457513110645907}, "magic_list.list.partition": {"tf": 2.6457513110645907}, "magic_list.list.bisect": {"tf": 2.8284271247461903}}, "df": 3}, "3": {"3": {"3": {"3": {"3": {"3": {"3": {"3": {"3": {"3": {"3": {"3": {"3": {"3": {"5": {"docs": {"magic_list.list.mean": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"magic_list.list.head": {"tf": 1.4142135623730951}, "magic_list.list.tail": {"tf": 1}, "magic_list.list.init": {"tf": 1.4142135623730951}, "magic_list.list.last": {"tf": 1}, "magic_list.list.prepend": {"tf": 1.4142135623730951}, "magic_list.list.reversed": {"tf": 1.4142135623730951}, "magic_list.list.sorted": {"tf": 1.4142135623730951}, "magic_list.list.shuffled": {"tf": 2}, "magic_list.list.map": {"tf": 1.7320508075688772}, "magic_list.list.rotate": {"tf": 2.449489742783178}, "magic_list.list.filter": {"tf": 1.4142135623730951}, "magic_list.list.mask": {"tf": 1.7320508075688772}, "magic_list.list.deduplicate": {"tf": 1.4142135623730951}, "magic_list.list.reduce": {"tf": 1.4142135623730951}, "magic_list.list.reduce_right": {"tf": 2}, "magic_list.list.fold": {"tf": 2}, "magic_list.list.fold_right": {"tf": 2}, "magic_list.list.scan": {"tf": 2.23606797749979}, "magic_list.list.scan_right": {"tf": 1.4142135623730951}, "magic_list.list.merge": {"tf": 1.4142135623730951}, "magic_list.list.flatten": {"tf": 1.4142135623730951}, "magic_list.list.sum": {"tf": 1}, "magic_list.list.mean": {"tf": 1.4142135623730951}, "magic_list.list.fill_left": {"tf": 2.449489742783178}, "magic_list.list.fill_right": {"tf": 2.449489742783178}, "magic_list.list.interleave": {"tf": 2}, "magic_list.list.select": {"tf": 2}, "magic_list.list.take": {"tf": 2.23606797749979}, "magic_list.list.take_right": {"tf": 2}, "magic_list.list.drop": {"tf": 2.23606797749979}, "magic_list.list.drop_right": {"tf": 2.449489742783178}, "magic_list.list.slice": {"tf": 1.4142135623730951}, "magic_list.list.bisect": {"tf": 1}}, "df": 33}, "4": {"0": {"docs": {"magic_list.list.fill_left": {"tf": 1}, "magic_list.list.fill_right": {"tf": 1}}, "df": 2}, "docs": {"magic_list.list.map": {"tf": 1}, "magic_list.list.merge": {"tf": 1}, "magic_list.list.flatten": {"tf": 1.4142135623730951}, "magic_list.list.select": {"tf": 1.4142135623730951}, "magic_list.list.slice": {"tf": 3}, "magic_list.list.partition": {"tf": 2.8284271247461903}, "magic_list.list.bisect": {"tf": 2.8284271247461903}}, "df": 7}, "5": {"docs": {"magic_list.list.head": {"tf": 1}, "magic_list.list.tail": {"tf": 1.4142135623730951}, "magic_list.list.init": {"tf": 1.4142135623730951}, "magic_list.list.last": {"tf": 1}, "magic_list.list.prepend": {"tf": 1.4142135623730951}, "magic_list.list.sorted": {"tf": 1.4142135623730951}, "magic_list.list.shuffled": {"tf": 2}, "magic_list.list.map": {"tf": 1.7320508075688772}, "magic_list.list.rotate": {"tf": 2.449489742783178}, "magic_list.list.filter": {"tf": 1.4142135623730951}, "magic_list.list.mask": {"tf": 1.4142135623730951}, "magic_list.list.reduce": {"tf": 1.4142135623730951}, "magic_list.list.reduce_right": {"tf": 2}, "magic_list.list.fold": {"tf": 1.4142135623730951}, "magic_list.list.fold_right": {"tf": 1.4142135623730951}, "magic_list.list.scan": {"tf": 1.7320508075688772}, "magic_list.list.scan_right": {"tf": 1.7320508075688772}, "magic_list.list.merge": {"tf": 1.4142135623730951}, "magic_list.list.flatten": {"tf": 1.4142135623730951}, "magic_list.list.sum": {"tf": 1}, "magic_list.list.mean": {"tf": 1}, "magic_list.list.fill_left": {"tf": 2.449489742783178}, "magic_list.list.fill_right": {"tf": 2.449489742783178}, "magic_list.list.interleave": {"tf": 2}, "magic_list.list.select": {"tf": 1.7320508075688772}, "magic_list.list.take": {"tf": 2.449489742783178}, "magic_list.list.take_right": {"tf": 2.449489742783178}, "magic_list.list.drop": {"tf": 2.449489742783178}, "magic_list.list.drop_right": {"tf": 2.449489742783178}, "magic_list.list.slice": {"tf": 1}}, "df": 30}, "6": {"docs": {"magic_list.list.map": {"tf": 1}, "magic_list.list.merge": {"tf": 1}, "magic_list.list.flatten": {"tf": 1.4142135623730951}}, "df": 3}, "7": {"docs": {"magic_list.list.fold": {"tf": 1}, "magic_list.list.scan_right": {"tf": 1}, "magic_list.list.merge": {"tf": 1}, "magic_list.list.flatten": {"tf": 1.4142135623730951}, "magic_list.list.interleave": {"tf": 1}}, "df": 5}, "8": {"docs": {"magic_list.list.scan": {"tf": 1}, "magic_list.list.flatten": {"tf": 1.4142135623730951}, "magic_list.list.interleave": {"tf": 1}, "magic_list.list.slice": {"tf": 3.1622776601683795}, "magic_list.list.partition": {"tf": 2.6457513110645907}, "magic_list.list.bisect": {"tf": 3}}, "df": 6}, "9": {"docs": {"magic_list.list.merge": {"tf": 1.4142135623730951}, "magic_list.list.flatten": {"tf": 1.4142135623730951}}, "df": 2}, "docs": {"magic_list": {"tf": 6.4031242374328485}, "magic_list.list": {"tf": 2.23606797749979}, "magic_list.list.head": {"tf": 7.937253933193772}, "magic_list.list.tail": {"tf": 7.937253933193772}, "magic_list.list.init": {"tf": 7.937253933193772}, "magic_list.list.last": {"tf": 7.937253933193772}, "magic_list.list.prepend": {"tf": 8.602325267042627}, "magic_list.list.reversed": {"tf": 6.557438524302}, "magic_list.list.sorted": {"tf": 8.717797887081348}, "magic_list.list.shuffled": {"tf": 9.486832980505138}, "magic_list.list.map": {"tf": 11.313708498984761}, "magic_list.list.rotate": {"tf": 12.041594578792296}, "magic_list.list.filter": {"tf": 12.569805089976535}, "magic_list.list.mask": {"tf": 11.357816691600547}, "magic_list.list.deduplicate": {"tf": 10.723805294763608}, "magic_list.list.reduce": {"tf": 9.695359714832659}, "magic_list.list.reduce_right": {"tf": 11.661903789690601}, "magic_list.list.fold": {"tf": 10.04987562112089}, "magic_list.list.fold_right": {"tf": 9.9498743710662}, "magic_list.list.scan": {"tf": 10.099504938362077}, "magic_list.list.scan_right": {"tf": 10.099504938362077}, "magic_list.list.merge": {"tf": 13.038404810405298}, "magic_list.list.flatten": {"tf": 12.24744871391589}, "magic_list.list.sum": {"tf": 10.099504938362077}, "magic_list.list.mean": {"tf": 9.9498743710662}, "magic_list.list.fill_left": {"tf": 13.228756555322953}, "magic_list.list.fill_right": {"tf": 13.228756555322953}, "magic_list.list.interleave": {"tf": 11}, "magic_list.list.gap_fill": {"tf": 3.4641016151377544}, "magic_list.list.select": {"tf": 11.313708498984761}, "magic_list.list.take": {"tf": 12.84523257866513}, "magic_list.list.take_right": {"tf": 12.96148139681572}, "magic_list.list.drop": {"tf": 12.806248474865697}, "magic_list.list.drop_right": {"tf": 12.806248474865697}, "magic_list.list.slice": {"tf": 18.65475810617763}, "magic_list.list.partition": {"tf": 15.198684153570664}, "magic_list.list.bisect": {"tf": 15.231546211727817}, "magic_list.list.trisect": {"tf": 4.358898943540674}, "magic_list.L": {"tf": 1.7320508075688772}}, "df": 39, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"magic_list": {"tf": 1}, "magic_list.list.gap_fill": {"tf": 1}, "magic_list.list.select": {"tf": 1}, "magic_list.list.slice": {"tf": 1}, "magic_list.list.partition": {"tf": 1}}, "df": 5}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"magic_list": {"tf": 1}, "magic_list.list.rotate": {"tf": 1}, "magic_list.list.sum": {"tf": 1}, "magic_list.list.interleave": {"tf": 1}, "magic_list.list.partition": {"tf": 1}}, "df": 5}, "n": {"docs": {"magic_list.list.take": {"tf": 1.4142135623730951}, "magic_list.list.take_right": {"tf": 1.4142135623730951}, "magic_list.list.drop": {"tf": 1.4142135623730951}, "magic_list.list.drop_right": {"tf": 1.4142135623730951}, "magic_list.list.slice": {"tf": 1.4142135623730951}}, "df": 5}}, "e": {"docs": {"magic_list": {"tf": 1}, "magic_list.list": {"tf": 1}, "magic_list.list.head": {"tf": 1.4142135623730951}, "magic_list.list.tail": {"tf": 1}, "magic_list.list.init": {"tf": 1}, "magic_list.list.last": {"tf": 1.4142135623730951}, "magic_list.list.prepend": {"tf": 1.4142135623730951}, "magic_list.list.reversed": {"tf": 1}, "magic_list.list.sorted": {"tf": 1}, "magic_list.list.shuffled": {"tf": 1}, "magic_list.list.map": {"tf": 1}, "magic_list.list.rotate": {"tf": 2.449489742783178}, "magic_list.list.filter": {"tf": 1}, "magic_list.list.mask": {"tf": 3}, "magic_list.list.deduplicate": {"tf": 1}, "magic_list.list.reduce": {"tf": 2.6457513110645907}, "magic_list.list.reduce_right": {"tf": 2.6457513110645907}, "magic_list.list.fold": {"tf": 2.23606797749979}, "magic_list.list.fold_right": {"tf": 2.23606797749979}, "magic_list.list.scan": {"tf": 2.6457513110645907}, "magic_list.list.scan_right": {"tf": 2.6457513110645907}, "magic_list.list.merge": {"tf": 2.6457513110645907}, "magic_list.list.flatten": {"tf": 1.7320508075688772}, "magic_list.list.sum": {"tf": 2.23606797749979}, "magic_list.list.mean": {"tf": 2}, "magic_list.list.fill_left": {"tf": 2.449489742783178}, "magic_list.list.fill_right": {"tf": 2.449489742783178}, "magic_list.list.interleave": {"tf": 2.23606797749979}, "magic_list.list.select": {"tf": 1.4142135623730951}, "magic_list.list.take": {"tf": 1.7320508075688772}, "magic_list.list.take_right": {"tf": 2}, "magic_list.list.drop": {"tf": 2}, "magic_list.list.drop_right": {"tf": 2.23606797749979}, "magic_list.list.slice": {"tf": 2.449489742783178}, "magic_list.list.partition": {"tf": 2}, "magic_list.list.bisect": {"tf": 1.7320508075688772}, "magic_list.list.trisect": {"tf": 2.449489742783178}}, "df": 37, "y": {"docs": {"magic_list": {"tf": 1}}, "df": 1}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list.reduce": {"tf": 1}, "magic_list.list.reduce_right": {"tf": 1}}, "df": 2}}}}}}, "m": {"docs": {"magic_list.list.take": {"tf": 1}, "magic_list.list.take_right": {"tf": 1}}, "df": 2}}}, "w": {"docs": {}, "df": 0, "o": {"docs": {"magic_list": {"tf": 1}, "magic_list.list.merge": {"tf": 1}, "magic_list.list.interleave": {"tf": 1}, "magic_list.list.partition": {"tf": 1}, "magic_list.list.trisect": {"tf": 1}}, "df": 5}}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"magic_list": {"tf": 1}, "magic_list.list": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"magic_list.list.head": {"tf": 1}, "magic_list.list.tail": {"tf": 1}, "magic_list.list.init": {"tf": 1}, "magic_list.list.last": {"tf": 1}, "magic_list.list.rotate": {"tf": 1}, "magic_list.list.mask": {"tf": 1}, "magic_list.list.reduce": {"tf": 1}, "magic_list.list.reduce_right": {"tf": 1}, "magic_list.list.merge": {"tf": 1}, "magic_list.list.sum": {"tf": 1}, "magic_list.list.mean": {"tf": 1.4142135623730951}, "magic_list.list.partition": {"tf": 1}, "magic_list.list.bisect": {"tf": 1}}, "df": 13}}}}}}}}, "o": {"docs": {"magic_list": {"tf": 1.4142135623730951}, "magic_list.list.rotate": {"tf": 1.4142135623730951}, "magic_list.list.deduplicate": {"tf": 1}, "magic_list.list.reduce": {"tf": 1.4142135623730951}, "magic_list.list.reduce_right": {"tf": 1.4142135623730951}, "magic_list.list.fold": {"tf": 1}, "magic_list.list.fold_right": {"tf": 1}, "magic_list.list.scan": {"tf": 1}, "magic_list.list.scan_right": {"tf": 1}, "magic_list.list.flatten": {"tf": 1}, "magic_list.list.fill_left": {"tf": 1.4142135623730951}, "magic_list.list.fill_right": {"tf": 1.4142135623730951}, "magic_list.list.interleave": {"tf": 1.7320508075688772}, "magic_list.list.slice": {"tf": 1.4142135623730951}, "magic_list.list.trisect": {"tf": 1}}, "df": 15}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {"magic_list.list.tail": {"tf": 1.7320508075688772}}, "df": 1}}, "k": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list.take": {"tf": 2.6457513110645907}, "magic_list.list.take_right": {"tf": 2.6457513110645907}, "magic_list.list.slice": {"tf": 1}}, "df": 3, "s": {"docs": {"magic_list.list.fill_left": {"tf": 1}, "magic_list.list.fill_right": {"tf": 1}, "magic_list.list.interleave": {"tf": 1}}, "df": 3}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"magic_list.list.rotate": {"tf": 1}, "magic_list.list.fill_left": {"tf": 1}, "magic_list.list.fill_right": {"tf": 1}, "magic_list.list.select": {"tf": 1}}, "df": 4}}}, "p": {"docs": {"magic_list.list.slice": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list.mask": {"tf": 2}}, "df": 1}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list.trisect": {"tf": 1}}, "df": 1}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list.trisect": {"tf": 1}}, "df": 1}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"magic_list": {"tf": 1}}, "df": 1}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list.take": {"tf": 1}, "magic_list.list.take_right": {"tf": 1}, "magic_list.list.drop": {"tf": 1}, "magic_list.list.drop_right": {"tf": 1}}, "df": 4}}}, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"magic_list": {"tf": 1.4142135623730951}}, "df": 1}}}, "p": {"docs": {"magic_list.list.map": {"tf": 1.7320508075688772}}, "df": 1}, "s": {"docs": {}, "df": 0, "k": {"docs": {"magic_list.list.mask": {"tf": 2.449489742783178}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list.head": {"tf": 1}, "magic_list.list.tail": {"tf": 1}, "magic_list.list.init": {"tf": 1}, "magic_list.list.last": {"tf": 1}, "magic_list.list.rotate": {"tf": 1}, "magic_list.list.mask": {"tf": 1.4142135623730951}, "magic_list.list.reduce": {"tf": 1}, "magic_list.list.reduce_right": {"tf": 1}, "magic_list.list.merge": {"tf": 1.4142135623730951}, "magic_list.list.sum": {"tf": 1.4142135623730951}, "magic_list.list.mean": {"tf": 1.4142135623730951}, "magic_list.list.fill_left": {"tf": 1}, "magic_list.list.fill_right": {"tf": 1}, "magic_list.list.interleave": {"tf": 1}, "magic_list.list.select": {"tf": 1}, "magic_list.list.take": {"tf": 1}, "magic_list.list.take_right": {"tf": 1}, "magic_list.list.drop": {"tf": 1}, "magic_list.list.drop_right": {"tf": 1}, "magic_list.list.slice": {"tf": 1}, "magic_list.list.partition": {"tf": 1}, "magic_list.list.bisect": {"tf": 1}, "magic_list.list.trisect": {"tf": 1}}, "df": 23}}, "l": {"docs": {"magic_list.list.reduce": {"tf": 1}, "magic_list.list.fold": {"tf": 1}, "magic_list.list.fold_right": {"tf": 1}}, "df": 3}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list.merge": {"tf": 1.7320508075688772}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"magic_list.list.mean": {"tf": 2.449489742783178}}, "df": 1}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"magic_list.list.slice": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"magic_list.list.flatten": {"tf": 1}, "magic_list.list.sum": {"tf": 1}, "magic_list.list.mean": {"tf": 1}}, "df": 3, "s": {"docs": {"magic_list": {"tf": 1}, "magic_list.list.flatten": {"tf": 1.4142135623730951}, "magic_list.list.take": {"tf": 1}, "magic_list.list.take_right": {"tf": 1}, "magic_list.list.drop": {"tf": 1}, "magic_list.list.drop_right": {"tf": 1}}, "df": 6}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"magic_list.list.flatten": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"magic_list.list.mask": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"magic_list": {"tf": 1.4142135623730951}, "magic_list.list.slice": {"tf": 1}}, "df": 2, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list.rotate": {"tf": 1}, "magic_list.list.reduce": {"tf": 1}, "magic_list.list.reduce_right": {"tf": 1}, "magic_list.list.flatten": {"tf": 1.7320508075688772}, "magic_list.list.sum": {"tf": 1}, "magic_list.list.mean": {"tf": 1.4142135623730951}, "magic_list.list.fill_left": {"tf": 1}, "magic_list.list.fill_right": {"tf": 1}, "magic_list.list.take": {"tf": 1.4142135623730951}, "magic_list.list.take_right": {"tf": 1.4142135623730951}, "magic_list.list.drop": {"tf": 1.4142135623730951}, "magic_list.list.drop_right": {"tf": 1.4142135623730951}, "magic_list.list.slice": {"tf": 1}, "magic_list.list.partition": {"tf": 1.4142135623730951}, "magic_list.list.bisect": {"tf": 1}}, "df": 15}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"magic_list.list.reduce": {"tf": 1}, "magic_list.list.reduce_right": {"tf": 1}, "magic_list.list.fold": {"tf": 1}, "magic_list.list.fold_right": {"tf": 1}, "magic_list.list.scan": {"tf": 1}, "magic_list.list.scan_right": {"tf": 1}}, "df": 6}}}, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list.mean": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"magic_list": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list.fill_left": {"tf": 1.4142135623730951}, "magic_list.list.fill_right": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"magic_list.list.trisect": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {"magic_list.list.filter": {"tf": 1.4142135623730951}, "magic_list.list.merge": {"tf": 1.4142135623730951}}, "df": 2, "y": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"magic_list": {"tf": 1}}, "df": 1}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"magic_list.list.slice": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"magic_list": {"tf": 1}}, "df": 1}}}}}}}}, "e": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list": {"tf": 1}, "magic_list.list.mask": {"tf": 1.4142135623730951}, "magic_list.list.merge": {"tf": 1}}, "df": 3, "s": {"docs": {"magic_list.list.merge": {"tf": 1}}, "df": 1}}}}}}}, "l": {"docs": {}, "df": 0, "f": {"docs": {"magic_list.list.merge": {"tf": 1}}, "df": 1, "[": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"magic_list.list.slice": {"tf": 1}}, "df": 1}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list.select": {"tf": 2}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"magic_list.list.select": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"magic_list.list.trisect": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"magic_list.list.sorted": {"tf": 1.7320508075688772}}, "df": 1}}}}}, "h": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"magic_list.list.shuffled": {"tf": 2}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list.rotate": {"tf": 1.4142135623730951}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {"magic_list.list.map": {"tf": 1}, "magic_list.list.mean": {"tf": 1}}, "df": 2}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list.slice": {"tf": 2.6457513110645907}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "p": {"docs": {"magic_list.list.slice": {"tf": 2.6457513110645907}}, "df": 1}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list.mask": {"tf": 1.4142135623730951}, "magic_list.list.merge": {"tf": 1}}, "df": 2}}}, "u": {"docs": {}, "df": 0, "b": {"docs": {"magic_list.list.reduce_right": {"tf": 1}, "magic_list.list.fold_right": {"tf": 1}, "magic_list.list.merge": {"tf": 1}}, "df": 3}, "m": {"docs": {"magic_list.list.sum": {"tf": 2}, "magic_list.list.fill_left": {"tf": 1}, "magic_list.list.fill_right": {"tf": 1}}, "df": 3, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"magic_list.list.sum": {"tf": 1}}, "df": 1}}}}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list.sum": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"magic_list.list.interleave": {"tf": 1}}, "df": 1}}}}}}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"magic_list.list.scan": {"tf": 1.4142135623730951}, "magic_list.list.scan_right": {"tf": 1.4142135623730951}}, "df": 2}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list.slice": {"tf": 2.8284271247461903}}, "df": 1, "s": {"docs": {"magic_list.list.partition": {"tf": 1}}, "df": 1}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list.trisect": {"tf": 1}}, "df": 1}}, "r": {"docs": {"magic_list.list.trisect": {"tf": 1}}, "df": 1}}}}}}}, "l": {"docs": {"magic_list": {"tf": 1.4142135623730951}, "magic_list.list.head": {"tf": 1}, "magic_list.list.tail": {"tf": 1}, "magic_list.list.init": {"tf": 1}, "magic_list.list.last": {"tf": 1}, "magic_list.list.prepend": {"tf": 2}, "magic_list.list.reversed": {"tf": 1}, "magic_list.list.sorted": {"tf": 1.4142135623730951}, "magic_list.list.shuffled": {"tf": 1.4142135623730951}, "magic_list.list.map": {"tf": 1.4142135623730951}, "magic_list.list.rotate": {"tf": 1.7320508075688772}, "magic_list.list.filter": {"tf": 1.7320508075688772}, "magic_list.list.mask": {"tf": 1.4142135623730951}, "magic_list.list.deduplicate": {"tf": 1.4142135623730951}, "magic_list.list.reduce": {"tf": 1}, "magic_list.list.reduce_right": {"tf": 1.4142135623730951}, "magic_list.list.fold": {"tf": 1}, "magic_list.list.fold_right": {"tf": 1}, "magic_list.list.scan": {"tf": 1}, "magic_list.list.scan_right": {"tf": 1}, "magic_list.list.merge": {"tf": 1.4142135623730951}, "magic_list.list.flatten": {"tf": 2.23606797749979}, "magic_list.list.sum": {"tf": 1.4142135623730951}, "magic_list.list.mean": {"tf": 1.4142135623730951}, "magic_list.list.fill_left": {"tf": 1.7320508075688772}, "magic_list.list.fill_right": {"tf": 1.7320508075688772}, "magic_list.list.interleave": {"tf": 1.4142135623730951}, "magic_list.list.select": {"tf": 1.4142135623730951}, "magic_list.list.take": {"tf": 2}, "magic_list.list.take_right": {"tf": 2}, "magic_list.list.drop": {"tf": 2}, "magic_list.list.drop_right": {"tf": 2}, "magic_list.list.slice": {"tf": 2.449489742783178}, "magic_list.list.partition": {"tf": 2}, "magic_list.list.bisect": {"tf": 2}}, "df": 35, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"magic_list": {"tf": 1.7320508075688772}, "magic_list.list": {"tf": 1}, "magic_list.list.head": {"tf": 2}, "magic_list.list.tail": {"tf": 2}, "magic_list.list.init": {"tf": 2}, "magic_list.list.last": {"tf": 2}, "magic_list.list.prepend": {"tf": 1}, "magic_list.list.reversed": {"tf": 1}, "magic_list.list.sorted": {"tf": 1.4142135623730951}, "magic_list.list.shuffled": {"tf": 1.4142135623730951}, "magic_list.list.map": {"tf": 1.4142135623730951}, "magic_list.list.rotate": {"tf": 2}, "magic_list.list.filter": {"tf": 1.4142135623730951}, "magic_list.list.mask": {"tf": 2.23606797749979}, "magic_list.list.deduplicate": {"tf": 1.4142135623730951}, "magic_list.list.reduce": {"tf": 2.23606797749979}, "magic_list.list.reduce_right": {"tf": 2.23606797749979}, "magic_list.list.fold": {"tf": 1.4142135623730951}, "magic_list.list.fold_right": {"tf": 1.4142135623730951}, "magic_list.list.scan": {"tf": 1.7320508075688772}, "magic_list.list.scan_right": {"tf": 1.7320508075688772}, "magic_list.list.merge": {"tf": 1.7320508075688772}, "magic_list.list.flatten": {"tf": 2.449489742783178}, "magic_list.list.sum": {"tf": 2}, "magic_list.list.mean": {"tf": 2.23606797749979}, "magic_list.list.fill_left": {"tf": 1.7320508075688772}, "magic_list.list.fill_right": {"tf": 1.7320508075688772}, "magic_list.list.interleave": {"tf": 1.7320508075688772}, "magic_list.list.select": {"tf": 1.4142135623730951}, "magic_list.list.take": {"tf": 1.7320508075688772}, "magic_list.list.take_right": {"tf": 2}, "magic_list.list.drop": {"tf": 1.7320508075688772}, "magic_list.list.drop_right": {"tf": 1.7320508075688772}, "magic_list.list.slice": {"tf": 1.4142135623730951}, "magic_list.list.partition": {"tf": 2}, "magic_list.list.bisect": {"tf": 2}, "magic_list.list.trisect": {"tf": 1.4142135623730951}}, "df": 37, "s": {"docs": {"magic_list": {"tf": 1}, "magic_list.list.bisect": {"tf": 1}, "magic_list.list.trisect": {"tf": 1}}, "df": 3}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"magic_list": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list.init": {"tf": 1}, "magic_list.list.last": {"tf": 2}, "magic_list.list.reduce_right": {"tf": 1}, "magic_list.list.slice": {"tf": 1}}, "df": 4}}, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {"magic_list.list.map": {"tf": 1.4142135623730951}, "magic_list.list.filter": {"tf": 1.7320508075688772}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list.trisect": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list.rotate": {"tf": 1}, "magic_list.list.deduplicate": {"tf": 1}, "magic_list.list.reduce": {"tf": 1}, "magic_list.list.reduce_right": {"tf": 1}, "magic_list.list.fold": {"tf": 1}, "magic_list.list.fold_right": {"tf": 1}, "magic_list.list.scan": {"tf": 1}, "magic_list.list.scan_right": {"tf": 1}, "magic_list.list.fill_left": {"tf": 2.23606797749979}, "magic_list.list.partition": {"tf": 1}, "magic_list.list.trisect": {"tf": 1}}, "df": 11, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list.reduce": {"tf": 1}, "magic_list.list.reduce_right": {"tf": 1}, "magic_list.list.fold": {"tf": 1}, "magic_list.list.fold_right": {"tf": 1}, "magic_list.list.scan": {"tf": 1}, "magic_list.list.scan_right": {"tf": 1}}, "df": 6}}}}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"magic_list.list.mask": {"tf": 1.4142135623730951}, "magic_list.list.merge": {"tf": 1.4142135623730951}, "magic_list.list.take": {"tf": 1}, "magic_list.list.take_right": {"tf": 1}, "magic_list.list.drop": {"tf": 1}, "magic_list.list.drop_right": {"tf": 1}}, "df": 6}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {"magic_list.list.take": {"tf": 1}, "magic_list.list.take_right": {"tf": 1}, "magic_list.list.drop": {"tf": 1}, "magic_list.list.drop_right": {"tf": 1}}, "df": 4}}}}, "a": {"docs": {"magic_list": {"tf": 1.4142135623730951}, "magic_list.list.reversed": {"tf": 1}, "magic_list.list.sorted": {"tf": 1.7320508075688772}, "magic_list.list.shuffled": {"tf": 1}, "magic_list.list.reduce": {"tf": 1}, "magic_list.list.reduce_right": {"tf": 1}, "magic_list.list.fold": {"tf": 1}, "magic_list.list.fold_right": {"tf": 1}, "magic_list.list.scan": {"tf": 1}, "magic_list.list.scan_right": {"tf": 1}, "magic_list.list.merge": {"tf": 1}, "magic_list.list.flatten": {"tf": 1.4142135623730951}, "magic_list.list.fill_left": {"tf": 1.4142135623730951}, "magic_list.list.fill_right": {"tf": 1.4142135623730951}, "magic_list.list.interleave": {"tf": 1.4142135623730951}, "magic_list.list.take": {"tf": 1}, "magic_list.list.take_right": {"tf": 1}, "magic_list.list.drop": {"tf": 1}, "magic_list.list.drop_right": {"tf": 1}, "magic_list.list.slice": {"tf": 1}, "magic_list.list.bisect": {"tf": 1}, "magic_list.list.trisect": {"tf": 1}}, "df": 22, "s": {"docs": {"magic_list": {"tf": 1}, "magic_list.list.mask": {"tf": 1.4142135623730951}, "magic_list.list.reduce": {"tf": 1}, "magic_list.list.reduce_right": {"tf": 1}, "magic_list.list.fold": {"tf": 1}, "magic_list.list.fold_right": {"tf": 1}, "magic_list.list.scan": {"tf": 1}, "magic_list.list.scan_right": {"tf": 1}}, "df": 8}, "d": {"docs": {}, "df": 0, "d": {"docs": {"magic_list.list.prepend": {"tf": 1}, "magic_list.list.reduce": {"tf": 1}, "magic_list.list.reduce_right": {"tf": 1.4142135623730951}, "magic_list.list.fold": {"tf": 1}, "magic_list.list.scan": {"tf": 1.4142135623730951}, "magic_list.list.scan_right": {"tf": 1.4142135623730951}, "magic_list.list.merge": {"tf": 1.4142135623730951}, "magic_list.list.interleave": {"tf": 1}}, "df": 8, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"magic_list.list.sum": {"tf": 1}}, "df": 1}}}}}}}, "n": {"docs": {"magic_list.list.prepend": {"tf": 1}, "magic_list.list.reduce": {"tf": 1.4142135623730951}, "magic_list.list.reduce_right": {"tf": 1.4142135623730951}, "magic_list.list.fold": {"tf": 1}, "magic_list.list.fold_right": {"tf": 1}, "magic_list.list.scan": {"tf": 1}, "magic_list.list.scan_right": {"tf": 1}, "magic_list.list.sum": {"tf": 1.4142135623730951}, "magic_list.list.select": {"tf": 1}, "magic_list.list.slice": {"tf": 1}, "magic_list.list.partition": {"tf": 1}, "magic_list.list.bisect": {"tf": 1}}, "df": 12, "d": {"docs": {"magic_list.list.deduplicate": {"tf": 1}, "magic_list.list.reduce": {"tf": 1}, "magic_list.list.reduce_right": {"tf": 1}, "magic_list.list.fold": {"tf": 1.4142135623730951}, "magic_list.list.fold_right": {"tf": 1.4142135623730951}, "magic_list.list.scan": {"tf": 1.4142135623730951}, "magic_list.list.scan_right": {"tf": 1.4142135623730951}, "magic_list.list.merge": {"tf": 1.7320508075688772}, "magic_list.list.flatten": {"tf": 1}, "magic_list.list.sum": {"tf": 1}, "magic_list.list.mean": {"tf": 1}, "magic_list.list.fill_left": {"tf": 1.4142135623730951}, "magic_list.list.fill_right": {"tf": 1.4142135623730951}, "magic_list.list.interleave": {"tf": 1.4142135623730951}, "magic_list.list.take": {"tf": 1.4142135623730951}, "magic_list.list.take_right": {"tf": 1.4142135623730951}, "magic_list.list.drop": {"tf": 1.4142135623730951}, "magic_list.list.drop_right": {"tf": 1.4142135623730951}, "magic_list.list.slice": {"tf": 1.4142135623730951}, "magic_list.list.partition": {"tf": 1.4142135623730951}, "magic_list.list.bisect": {"tf": 1}, "magic_list.list.trisect": {"tf": 2}}, "df": 22}}, "t": {"docs": {"magic_list.list.prepend": {"tf": 1}, "magic_list.list.mask": {"tf": 1.4142135623730951}, "magic_list.list.merge": {"tf": 1}, "magic_list.list.fill_left": {"tf": 1}, "magic_list.list.fill_right": {"tf": 1}, "magic_list.list.select": {"tf": 1}, "magic_list.list.partition": {"tf": 1}, "magic_list.list.trisect": {"tf": 1}}, "df": 8}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"magic_list.list.map": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"magic_list.list.flatten": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"magic_list.list.fill_left": {"tf": 1}, "magic_list.list.fill_right": {"tf": 1}}, "df": 2}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list.merge": {"tf": 1}, "magic_list.list.slice": {"tf": 1}, "magic_list.list.trisect": {"tf": 1}}, "df": 3}, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"magic_list.list.trisect": {"tf": 1}}, "df": 1}}}}}}}}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list.interleave": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"magic_list.list.gap_fill": {"tf": 1.4142135623730951}}, "df": 1}}}, "l": {"docs": {"magic_list.list.select": {"tf": 1}}, "df": 1}, "s": {"docs": {}, "df": 0, "o": {"docs": {"magic_list.list.partition": {"tf": 1}}, "df": 1}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list.take": {"tf": 1}, "magic_list.list.take_right": {"tf": 1}, "magic_list.list.drop": {"tf": 1}, "magic_list.list.drop_right": {"tf": 1}}, "df": 4}}}}}, "f": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"magic_list.list.partition": {"tf": 1}, "magic_list.list.bisect": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"magic_list": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"magic_list.list.reduce": {"tf": 1}, "magic_list.list.reduce_right": {"tf": 1}, "magic_list.list.sum": {"tf": 1}, "magic_list.list.slice": {"tf": 1}}, "df": 4}}}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"magic_list": {"tf": 1}, "magic_list.list.slice": {"tf": 1}}, "df": 2}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {"magic_list.list.merge": {"tf": 1}}, "df": 1}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"magic_list.list.head": {"tf": 1.4142135623730951}, "magic_list.list.tail": {"tf": 1.4142135623730951}, "magic_list.list.init": {"tf": 1.4142135623730951}, "magic_list.list.last": {"tf": 1.4142135623730951}, "magic_list.list.rotate": {"tf": 1.4142135623730951}, "magic_list.list.reduce": {"tf": 1.7320508075688772}, "magic_list.list.reduce_right": {"tf": 1.7320508075688772}, "magic_list.list.fold": {"tf": 1}, "magic_list.list.fold_right": {"tf": 1}, "magic_list.list.scan": {"tf": 1}, "magic_list.list.scan_right": {"tf": 1}, "magic_list.list.sum": {"tf": 1.4142135623730951}, "magic_list.list.mean": {"tf": 1.4142135623730951}, "magic_list.list.interleave": {"tf": 1.4142135623730951}, "magic_list.list.partition": {"tf": 1.4142135623730951}, "magic_list.list.bisect": {"tf": 1.4142135623730951}, "magic_list.list.trisect": {"tf": 1}}, "df": 17}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"magic_list.list.map": {"tf": 1}, "magic_list.list.filter": {"tf": 1}, "magic_list.list.reduce": {"tf": 1}, "magic_list.list.reduce_right": {"tf": 1}, "magic_list.list.fold": {"tf": 1}, "magic_list.list.fold_right": {"tf": 1}, "magic_list.list.scan": {"tf": 1}, "magic_list.list.scan_right": {"tf": 1}, "magic_list.list.merge": {"tf": 1}}, "df": 9}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"magic_list.list.mask": {"tf": 1}}, "df": 1}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list.mask": {"tf": 1.4142135623730951}, "magic_list.list.reduce": {"tf": 1.4142135623730951}, "magic_list.list.reduce_right": {"tf": 1.4142135623730951}, "magic_list.list.fold": {"tf": 1}, "magic_list.list.fold_right": {"tf": 1}, "magic_list.list.scan": {"tf": 1}, "magic_list.list.scan_right": {"tf": 1}, "magic_list.list.partition": {"tf": 1.7320508075688772}}, "df": 8, "s": {"docs": {"magic_list.list.deduplicate": {"tf": 1}, "magic_list.list.flatten": {"tf": 1.4142135623730951}, "magic_list.list.sum": {"tf": 1}, "magic_list.list.mean": {"tf": 1}, "magic_list.list.bisect": {"tf": 1}}, "df": 5}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list.mask": {"tf": 1}}, "df": 1}}}}, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"magic_list": {"tf": 1.4142135623730951}, "magic_list.list": {"tf": 1}}, "df": 2}, "d": {"docs": {"magic_list.list.merge": {"tf": 1}}, "df": 1}}}, "t": {"docs": {"magic_list.list.partition": {"tf": 1}}, "df": 1}}, "e": {"docs": {"magic_list": {"tf": 1.4142135623730951}, "magic_list.list.head": {"tf": 1}, "magic_list.list.tail": {"tf": 1}, "magic_list.list.init": {"tf": 1}, "magic_list.list.last": {"tf": 1}, "magic_list.list.rotate": {"tf": 1.4142135623730951}, "magic_list.list.mask": {"tf": 1.4142135623730951}, "magic_list.list.reduce": {"tf": 1.4142135623730951}, "magic_list.list.reduce_right": {"tf": 1.4142135623730951}, "magic_list.list.merge": {"tf": 1}, "magic_list.list.flatten": {"tf": 1}, "magic_list.list.sum": {"tf": 1}, "magic_list.list.mean": {"tf": 1.4142135623730951}, "magic_list.list.fill_left": {"tf": 1.7320508075688772}, "magic_list.list.fill_right": {"tf": 1.7320508075688772}, "magic_list.list.interleave": {"tf": 2}, "magic_list.list.select": {"tf": 1.4142135623730951}, "magic_list.list.take": {"tf": 1}, "magic_list.list.take_right": {"tf": 1}, "magic_list.list.drop": {"tf": 1}, "magic_list.list.drop_right": {"tf": 1}, "magic_list.list.slice": {"tf": 1.4142135623730951}, "magic_list.list.partition": {"tf": 1.4142135623730951}, "magic_list.list.bisect": {"tf": 1}, "magic_list.list.trisect": {"tf": 1.4142135623730951}}, "df": 25, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"magic_list.list.prepend": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"magic_list.list.reduce": {"tf": 1}, "magic_list.list.reduce_right": {"tf": 1}, "magic_list.list.fold": {"tf": 1}, "magic_list.list.fold_right": {"tf": 1}, "magic_list.list.scan": {"tf": 1}, "magic_list.list.scan_right": {"tf": 1}, "magic_list.list.interleave": {"tf": 1}}, "df": 7}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list.flatten": {"tf": 1}}, "df": 1}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list.partition": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "j": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {"magic_list.list.filter": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"magic_list.list.select": {"tf": 1.4142135623730951}, "magic_list.list.slice": {"tf": 1.7320508075688772}, "magic_list.list.partition": {"tf": 1.4142135623730951}}, "df": 3}}}}}, "y": {"docs": {"magic_list.list.scan": {"tf": 1}, "magic_list.list.scan_right": {"tf": 1}, "magic_list.list.trisect": {"tf": 1}}, "df": 3}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list.bisect": {"tf": 2.6457513110645907}}, "df": 1}}}}}}, "i": {"docs": {"magic_list.list.filter": {"tf": 1.4142135623730951}, "magic_list.list.mask": {"tf": 1.4142135623730951}, "magic_list.list.merge": {"tf": 2.23606797749979}}, "df": 3, "n": {"docs": {"magic_list": {"tf": 1.4142135623730951}, "magic_list.list": {"tf": 1.4142135623730951}, "magic_list.list.filter": {"tf": 1}, "magic_list.list.interleave": {"tf": 1}, "magic_list.list.select": {"tf": 1.4142135623730951}, "magic_list.list.slice": {"tf": 1}, "magic_list.list.partition": {"tf": 1.4142135623730951}}, "df": 7, "i": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list.init": {"tf": 1.7320508075688772}}, "df": 1, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"magic_list.list.fold": {"tf": 1}, "magic_list.list.fold_right": {"tf": 1}, "magic_list.list.scan": {"tf": 1}, "magic_list.list.scan_right": {"tf": 1}}, "df": 4}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"magic_list.list.mask": {"tf": 1.4142135623730951}, "magic_list.list.merge": {"tf": 1}, "magic_list.list.select": {"tf": 1.4142135623730951}, "magic_list.list.slice": {"tf": 1}, "magic_list.list.partition": {"tf": 2}, "magic_list.list.bisect": {"tf": 1}, "magic_list.list.trisect": {"tf": 1.7320508075688772}}, "df": 7, "e": {"docs": {}, "df": 0, "s": {"docs": {"magic_list.list.select": {"tf": 1.4142135623730951}, "magic_list.list.trisect": {"tf": 1}}, "df": 2}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"magic_list.list.select": {"tf": 1}, "magic_list.list.partition": {"tf": 1}}, "df": 2}}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list.reduce": {"tf": 1}, "magic_list.list.reduce_right": {"tf": 1}, "magic_list.list.fold": {"tf": 1}, "magic_list.list.fold_right": {"tf": 1}, "magic_list.list.scan": {"tf": 1}, "magic_list.list.scan_right": {"tf": 1}}, "df": 6, "e": {"docs": {}, "df": 0, "d": {"docs": {"magic_list.list.interleave": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"magic_list.list.slice": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list.scan": {"tf": 1}, "magic_list.list.scan_right": {"tf": 1}}, "df": 2}}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list.interleave": {"tf": 1.7320508075688772}, "magic_list.list.gap_fill": {"tf": 1}}, "df": 2}}}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"magic_list": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"magic_list": {"tf": 1}}, "df": 1}}}}}}}, "t": {"docs": {"magic_list.list.mask": {"tf": 1}, "magic_list.list.reduce": {"tf": 1}, "magic_list.list.reduce_right": {"tf": 1}, "magic_list.list.flatten": {"tf": 1.4142135623730951}, "magic_list.list.fill_left": {"tf": 1}, "magic_list.list.fill_right": {"tf": 1}, "magic_list.list.interleave": {"tf": 1}, "magic_list.list.slice": {"tf": 1}}, "df": 8, "e": {"docs": {}, "df": 0, "m": {"docs": {"magic_list.list.head": {"tf": 1}, "magic_list.list.tail": {"tf": 1}, "magic_list.list.init": {"tf": 1}, "magic_list.list.last": {"tf": 1}, "magic_list.list.prepend": {"tf": 1}, "magic_list.list.map": {"tf": 1}, "magic_list.list.filter": {"tf": 1}, "magic_list.list.slice": {"tf": 1}}, "df": 8, "s": {"docs": {"magic_list.list.rotate": {"tf": 1}, "magic_list.list.merge": {"tf": 1}, "magic_list.list.interleave": {"tf": 1.4142135623730951}, "magic_list.list.select": {"tf": 1}, "magic_list.list.take": {"tf": 1.7320508075688772}, "magic_list.list.take_right": {"tf": 1.7320508075688772}, "magic_list.list.drop": {"tf": 1.7320508075688772}, "magic_list.list.drop_right": {"tf": 1.7320508075688772}}, "df": 8}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"magic_list.list.fill_left": {"tf": 1}, "magic_list.list.fill_right": {"tf": 1}}, "df": 2}}}}}}}, "s": {"docs": {"magic_list.list.tail": {"tf": 1}, "magic_list.list.init": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "f": {"docs": {"magic_list.list.flatten": {"tf": 1}}, "df": 1}}}}}, "f": {"docs": {"magic_list.list.rotate": {"tf": 1}, "magic_list.list.filter": {"tf": 1}, "magic_list.list.mask": {"tf": 1}, "magic_list.list.reduce": {"tf": 1}, "magic_list.list.reduce_right": {"tf": 1}, "magic_list.list.fold": {"tf": 1}, "magic_list.list.fold_right": {"tf": 1}, "magic_list.list.scan": {"tf": 1}, "magic_list.list.scan_right": {"tf": 1}, "magic_list.list.flatten": {"tf": 1}, "magic_list.list.fill_left": {"tf": 1}, "magic_list.list.fill_right": {"tf": 1}, "magic_list.list.interleave": {"tf": 1}, "magic_list.list.select": {"tf": 1}, "magic_list.list.slice": {"tf": 1.7320508075688772}}, "df": 15}, "s": {"docs": {"magic_list.list.rotate": {"tf": 1}, "magic_list.list.filter": {"tf": 1}, "magic_list.list.mask": {"tf": 1}, "magic_list.list.reduce": {"tf": 1.4142135623730951}, "magic_list.list.reduce_right": {"tf": 1.4142135623730951}, "magic_list.list.fold": {"tf": 1.7320508075688772}, "magic_list.list.fold_right": {"tf": 1.7320508075688772}, "magic_list.list.scan": {"tf": 1.7320508075688772}, "magic_list.list.scan_right": {"tf": 1.7320508075688772}, "magic_list.list.flatten": {"tf": 1}, "magic_list.list.sum": {"tf": 1}, "magic_list.list.fill_left": {"tf": 1}, "magic_list.list.fill_right": {"tf": 1}, "magic_list.list.interleave": {"tf": 1.4142135623730951}, "magic_list.list.gap_fill": {"tf": 1}, "magic_list.list.select": {"tf": 1.4142135623730951}, "magic_list.list.take_right": {"tf": 1}, "magic_list.list.slice": {"tf": 2}, "magic_list.list.trisect": {"tf": 1}}, "df": 19}}, "p": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {"magic_list": {"tf": 1}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"magic_list.list.prepend": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"magic_list.list.rotate": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list.select": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"magic_list.list.take_right": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list.prepend": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"magic_list.list.fill_left": {"tf": 1}, "magic_list.list.fill_right": {"tf": 1}, "magic_list.list.interleave": {"tf": 1}}, "df": 3}, "d": {"docs": {"magic_list.list.bisect": {"tf": 1}, "magic_list.list.trisect": {"tf": 1}}, "df": 2}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"magic_list.list.select": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"magic_list.list.sum": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"magic_list.list.partition": {"tf": 2.8284271247461903}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {"magic_list.list.bisect": {"tf": 1}}, "df": 1}}}}, "w": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"magic_list": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list.merge": {"tf": 1}}, "df": 1}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"magic_list.list.fill_left": {"tf": 1}, "magic_list.list.fill_right": {"tf": 1}, "magic_list.list.interleave": {"tf": 1}}, "df": 3, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list.tail": {"tf": 1}, "magic_list.list.init": {"tf": 1}}, "df": 2}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"magic_list.list.reduce": {"tf": 1}, "magic_list.list.reduce_right": {"tf": 1}, "magic_list.list.select": {"tf": 1}, "magic_list.list.slice": {"tf": 1}}, "df": 4}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"magic_list.list.deduplicate": {"tf": 1.7320508075688772}, "magic_list.list.sum": {"tf": 1}, "magic_list.list.mean": {"tf": 1}}, "df": 3}}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"magic_list": {"tf": 1}, "magic_list.list.reduce": {"tf": 1}, "magic_list.list.reduce_right": {"tf": 1}, "magic_list.list.fold": {"tf": 1}, "magic_list.list.fold_right": {"tf": 1}, "magic_list.list.scan": {"tf": 1}, "magic_list.list.scan_right": {"tf": 1}}, "df": 7}}}}, "o": {"docs": {"magic_list.list.merge": {"tf": 1.4142135623730951}}, "df": 1, "n": {"docs": {"magic_list.list.map": {"tf": 1}, "magic_list.list.sum": {"tf": 1}, "magic_list.list.fill_left": {"tf": 1}, "magic_list.list.fill_right": {"tf": 1}}, "df": 4, "e": {"docs": {}, "df": 0, "s": {"docs": {"magic_list": {"tf": 1}, "magic_list.list.deduplicate": {"tf": 1}}, "df": 2}}, "l": {"docs": {}, "df": 0, "y": {"docs": {"magic_list.list.scan": {"tf": 1}, "magic_list.list.scan_right": {"tf": 1}}, "df": 2}}}, "f": {"docs": {"magic_list.list.head": {"tf": 1}, "magic_list.list.last": {"tf": 1}, "magic_list.list.prepend": {"tf": 1}, "magic_list.list.reversed": {"tf": 1}, "magic_list.list.sorted": {"tf": 1}, "magic_list.list.shuffled": {"tf": 1}, "magic_list.list.map": {"tf": 1}, "magic_list.list.filter": {"tf": 1}, "magic_list.list.mask": {"tf": 1.7320508075688772}, "magic_list.list.reduce": {"tf": 1}, "magic_list.list.reduce_right": {"tf": 1}, "magic_list.list.scan": {"tf": 1}, "magic_list.list.scan_right": {"tf": 1}, "magic_list.list.merge": {"tf": 1.7320508075688772}, "magic_list.list.sum": {"tf": 1}, "magic_list.list.mean": {"tf": 2}, "magic_list.list.fill_left": {"tf": 1}, "magic_list.list.fill_right": {"tf": 1}, "magic_list.list.gap_fill": {"tf": 1}, "magic_list.list.select": {"tf": 1}, "magic_list.list.take": {"tf": 1}, "magic_list.list.take_right": {"tf": 1.4142135623730951}, "magic_list.list.drop": {"tf": 1}, "magic_list.list.drop_right": {"tf": 1.4142135623730951}, "magic_list.list.slice": {"tf": 2}, "magic_list.list.partition": {"tf": 1}, "magic_list.list.bisect": {"tf": 1}, "magic_list.list.trisect": {"tf": 1.4142135623730951}}, "df": 28}, "r": {"docs": {"magic_list.list.slice": {"tf": 1.4142135623730951}}, "df": 1, "d": {"docs": {"magic_list.list.sorted": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "r": {"docs": {"magic_list.list.take_right": {"tf": 1}, "magic_list.list.partition": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"magic_list.list.deduplicate": {"tf": 1}, "magic_list.list.scan": {"tf": 1}, "magic_list.list.scan_right": {"tf": 1}, "magic_list.list.take_right": {"tf": 1}}, "df": 4}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"magic_list.list.rotate": {"tf": 1}}, "df": 1}}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"magic_list.list.reduce": {"tf": 1.7320508075688772}, "magic_list.list.reduce_right": {"tf": 2}, "magic_list.list.fold": {"tf": 1.7320508075688772}, "magic_list.list.fold_right": {"tf": 1.7320508075688772}, "magic_list.list.scan": {"tf": 1.7320508075688772}, "magic_list.list.scan_right": {"tf": 1.7320508075688772}, "magic_list.list.merge": {"tf": 1.7320508075688772}, "magic_list.list.sum": {"tf": 1}, "magic_list.list.interleave": {"tf": 1}}, "df": 9}}}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"magic_list.list.merge": {"tf": 1}}, "df": 1, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list.sum": {"tf": 1}}, "df": 1}}}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list.select": {"tf": 1}, "magic_list.list.slice": {"tf": 1.4142135623730951}, "magic_list.list.partition": {"tf": 1}}, "df": 3}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"magic_list": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"magic_list.list.scan": {"tf": 1}, "magic_list.list.scan_right": {"tf": 1}}, "df": 2}}}}}, "d": {"docs": {"magic_list.list.fold": {"tf": 1.4142135623730951}, "magic_list.list.fold_right": {"tf": 1.4142135623730951}}, "df": 2}}, "r": {"docs": {"magic_list.list": {"tf": 1}, "magic_list.list.slice": {"tf": 1}}, "df": 2}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"magic_list": {"tf": 1}, "magic_list.list.deduplicate": {"tf": 1}, "magic_list.list.reduce": {"tf": 1}, "magic_list.list.reduce_right": {"tf": 1}, "magic_list.list.fold": {"tf": 1}, "magic_list.list.fold_right": {"tf": 1}, "magic_list.list.scan": {"tf": 1}, "magic_list.list.scan_right": {"tf": 1}, "magic_list.list.merge": {"tf": 1}, "magic_list.list.take": {"tf": 1}, "magic_list.list.take_right": {"tf": 1}, "magic_list.list.drop": {"tf": 1}, "magic_list.list.drop_right": {"tf": 1}, "magic_list.list.slice": {"tf": 1}}, "df": 14}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list.head": {"tf": 1}, "magic_list.list.tail": {"tf": 1}, "magic_list.list.reduce": {"tf": 1}, "magic_list.list.trisect": {"tf": 1.4142135623730951}}, "df": 4}}}, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"magic_list.list.filter": {"tf": 1.7320508075688772}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"magic_list.list.mask": {"tf": 1}}, "df": 1}}}}}, "l": {"docs": {"magic_list.list.fill_left": {"tf": 2.449489742783178}, "magic_list.list.fill_right": {"tf": 2.449489742783178}, "magic_list.list.interleave": {"tf": 1}}, "df": 3, "e": {"docs": {}, "df": 0, "r": {"docs": {"magic_list.list.fill_left": {"tf": 1.4142135623730951}, "magic_list.list.fill_right": {"tf": 1.4142135623730951}, "magic_list.list.interleave": {"tf": 1.4142135623730951}}, "df": 3}, "d": {"docs": {"magic_list.list.interleave": {"tf": 1.4142135623730951}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"magic_list.list.fill_left": {"tf": 1}, "magic_list.list.fill_right": {"tf": 1}}, "df": 2}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"magic_list.list.map": {"tf": 1}, "magic_list.list.filter": {"tf": 1}, "magic_list.list.reduce": {"tf": 1}, "magic_list.list.reduce_right": {"tf": 1}, "magic_list.list.fold": {"tf": 1}, "magic_list.list.fold_right": {"tf": 1}, "magic_list.list.scan": {"tf": 1}, "magic_list.list.scan_right": {"tf": 1}, "magic_list.list.merge": {"tf": 1}, "magic_list.list.fill_left": {"tf": 1}, "magic_list.list.fill_right": {"tf": 1}, "magic_list.list.interleave": {"tf": 1}}, "df": 12}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list.filter": {"tf": 1}, "magic_list.list.mask": {"tf": 1.4142135623730951}}, "df": 2}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"magic_list.list.flatten": {"tf": 2.23606797749979}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"magic_list.list.flatten": {"tf": 1}}, "df": 1}}}}}}}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {"magic_list.list": {"tf": 1}}, "df": 1}}}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {"magic_list.list.filter": {"tf": 1.4142135623730951}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"magic_list.list.head": {"tf": 1.7320508075688772}}, "df": 1}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {"magic_list.list.filter": {"tf": 1.4142135623730951}, "magic_list.list.deduplicate": {"tf": 1.7320508075688772}, "magic_list.list.sum": {"tf": 1}, "magic_list.list.mean": {"tf": 1}}, "df": 4, "w": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"magic_list.list.sum": {"tf": 1}}, "df": 1}}}}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {"magic_list.list.head": {"tf": 1}, "magic_list.list.tail": {"tf": 1}, "magic_list.list.init": {"tf": 1}, "magic_list.list.last": {"tf": 1}, "magic_list.list.interleave": {"tf": 1}}, "df": 5}, "v": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list.merge": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {"magic_list.list": {"tf": 1}, "magic_list.list.drop": {"tf": 2.6457513110645907}, "magic_list.list.drop_right": {"tf": 2.6457513110645907}, "magic_list.list.slice": {"tf": 1}}, "df": 4}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"magic_list.list.filter": {"tf": 1}, "magic_list.list.mask": {"tf": 1}}, "df": 2}}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"magic_list.list.flatten": {"tf": 1}}, "df": 1}}}}}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list.deduplicate": {"tf": 1}}, "df": 1}}}}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list.deduplicate": {"tf": 1.7320508075688772}}, "df": 1, "d": {"docs": {"magic_list.list.deduplicate": {"tf": 1}}, "df": 1}}}}}}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"magic_list.list.gap_fill": {"tf": 1}}, "df": 1}}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"magic_list.list.trisect": {"tf": 1}}, "df": 1}}}}}}}}}, "o": {"docs": {"magic_list.list.slice": {"tf": 1}}, "df": 1}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list": {"tf": 1}}, "df": 1}}}}}}}}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"magic_list.list.reversed": {"tf": 1}, "magic_list.list.sorted": {"tf": 1}, "magic_list.list.shuffled": {"tf": 1}, "magic_list.list.mask": {"tf": 1}, "magic_list.list.deduplicate": {"tf": 1}, "magic_list.list.reduce": {"tf": 1}, "magic_list.list.reduce_right": {"tf": 1}, "magic_list.list.fold": {"tf": 1}, "magic_list.list.fold_right": {"tf": 1}, "magic_list.list.scan": {"tf": 1}, "magic_list.list.scan_right": {"tf": 1}, "magic_list.list.sum": {"tf": 1}, "magic_list.list.mean": {"tf": 1}, "magic_list.list.fill_left": {"tf": 1}, "magic_list.list.fill_right": {"tf": 1}, "magic_list.list.interleave": {"tf": 1}, "magic_list.list.take": {"tf": 1}, "magic_list.list.take_right": {"tf": 1}, "magic_list.list.drop": {"tf": 1}, "magic_list.list.drop_right": {"tf": 1}, "magic_list.list.slice": {"tf": 1}, "magic_list.list.partition": {"tf": 1}, "magic_list.list.bisect": {"tf": 1}, "magic_list.list.trisect": {"tf": 1}}, "df": 24, "e": {"docs": {}, "df": 0, "d": {"docs": {"magic_list.list.fold": {"tf": 1}, "magic_list.list.fold_right": {"tf": 1}, "magic_list.list.scan": {"tf": 1}, "magic_list.list.scan_right": {"tf": 1}}, "df": 4}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"magic_list.list.reversed": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list.deduplicate": {"tf": 1}}, "df": 1}}}}, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"magic_list.list.reduce": {"tf": 1}, "magic_list.list.reduce_right": {"tf": 1}, "magic_list.list.fold": {"tf": 1}, "magic_list.list.fold_right": {"tf": 1}, "magic_list.list.scan": {"tf": 1}, "magic_list.list.scan_right": {"tf": 1}}, "df": 6}}}, "e": {"docs": {"magic_list.list.reduce": {"tf": 1.7320508075688772}, "magic_list.list.reduce_right": {"tf": 2}}, "df": 2}}}}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list.reduce": {"tf": 1}, "magic_list.list.reduce_right": {"tf": 1}, "magic_list.list.fold": {"tf": 1}, "magic_list.list.fold_right": {"tf": 1}, "magic_list.list.scan": {"tf": 1}, "magic_list.list.scan_right": {"tf": 1}, "magic_list.list.merge": {"tf": 1}, "magic_list.list.fill_left": {"tf": 1}, "magic_list.list.fill_right": {"tf": 1}, "magic_list.list.interleave": {"tf": 1}, "magic_list.list.slice": {"tf": 1}}, "df": 11, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"magic_list.list.select": {"tf": 1}}, "df": 1}}}}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"magic_list.list.merge": {"tf": 1}, "magic_list.list.trisect": {"tf": 1}}, "df": 2}}}}}}}}}, "t": {"docs": {"magic_list.list.drop": {"tf": 1}, "magic_list.list.drop_right": {"tf": 1}}, "df": 2}}, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list.flatten": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"magic_list.list.select": {"tf": 1}}, "df": 1}}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"magic_list.list.trisect": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list.rotate": {"tf": 1}, "magic_list.list.deduplicate": {"tf": 1}, "magic_list.list.reduce": {"tf": 1}, "magic_list.list.reduce_right": {"tf": 2}, "magic_list.list.fold": {"tf": 1}, "magic_list.list.fold_right": {"tf": 1.7320508075688772}, "magic_list.list.scan": {"tf": 1}, "magic_list.list.scan_right": {"tf": 1.7320508075688772}, "magic_list.list.fill_right": {"tf": 2.23606797749979}, "magic_list.list.take_right": {"tf": 2.23606797749979}, "magic_list.list.drop_right": {"tf": 2.23606797749979}, "magic_list.list.partition": {"tf": 1}, "magic_list.list.trisect": {"tf": 1}}, "df": 13}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list.rotate": {"tf": 2}}, "df": 1, "d": {"docs": {"magic_list.list.rotate": {"tf": 1}}, "df": 1}}}}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list.reduce": {"tf": 1}, "magic_list.list.reduce_right": {"tf": 1}, "magic_list.list.slice": {"tf": 1}}, "df": 3, "d": {"docs": {"magic_list.list.flatten": {"tf": 1}, "magic_list.list.sum": {"tf": 1}}, "df": 2}}}}}}, "n": {"docs": {"magic_list.list.map": {"tf": 2}, "magic_list.list.rotate": {"tf": 1.4142135623730951}, "magic_list.list.filter": {"tf": 2}, "magic_list.list.fill_left": {"tf": 1}, "magic_list.list.fill_right": {"tf": 1}, "magic_list.list.take": {"tf": 1.4142135623730951}, "magic_list.list.take_right": {"tf": 1.4142135623730951}, "magic_list.list.drop": {"tf": 1.4142135623730951}, "magic_list.list.drop_right": {"tf": 1.4142135623730951}}, "df": 9, "o": {"docs": {"magic_list.list.head": {"tf": 1}, "magic_list.list.tail": {"tf": 1}, "magic_list.list.init": {"tf": 1}, "magic_list.list.last": {"tf": 1}, "magic_list.list.interleave": {"tf": 1}}, "df": 5, "n": {"docs": {"magic_list.list.head": {"tf": 1}, "magic_list.list.tail": {"tf": 1}, "magic_list.list.init": {"tf": 1}, "magic_list.list.last": {"tf": 1}, "magic_list.list.rotate": {"tf": 1}, "magic_list.list.reduce": {"tf": 1}, "magic_list.list.reduce_right": {"tf": 1}, "magic_list.list.sum": {"tf": 1}, "magic_list.list.mean": {"tf": 1}, "magic_list.list.fill_left": {"tf": 1}, "magic_list.list.fill_right": {"tf": 1}, "magic_list.list.interleave": {"tf": 1}, "magic_list.list.take": {"tf": 1}, "magic_list.list.take_right": {"tf": 1}, "magic_list.list.drop": {"tf": 1}, "magic_list.list.drop_right": {"tf": 1}, "magic_list.list.partition": {"tf": 1}, "magic_list.list.bisect": {"tf": 1}, "magic_list.list.trisect": {"tf": 1}}, "df": 19}, "t": {"docs": {"magic_list.list.slice": {"tf": 1}, "magic_list.list.trisect": {"tf": 1}}, "df": 2, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"magic_list.list.slice": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list.rotate": {"tf": 1}, "magic_list.list.fill_left": {"tf": 1.4142135623730951}, "magic_list.list.fill_right": {"tf": 1.4142135623730951}, "magic_list.list.take": {"tf": 1.4142135623730951}, "magic_list.list.take_right": {"tf": 1.4142135623730951}, "magic_list.list.drop": {"tf": 1.4142135623730951}, "magic_list.list.drop_right": {"tf": 1.4142135623730951}}, "df": 7}}}}}}, "w": {"docs": {"magic_list.list.merge": {"tf": 1}, "magic_list.list.fill_left": {"tf": 1}, "magic_list.list.fill_right": {"tf": 1}, "magic_list.list.interleave": {"tf": 1}}, "df": 4}}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"magic_list.list.fill_left": {"tf": 1}, "magic_list.list.fill_right": {"tf": 1}}, "df": 2, "s": {"docs": {"magic_list.list.mean": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "g": {"docs": {"magic_list.list.sorted": {"tf": 1}}, "df": 1, "t": {"docs": {"magic_list.list.head": {"tf": 2.449489742783178}, "magic_list.list.tail": {"tf": 2.449489742783178}, "magic_list.list.init": {"tf": 2.449489742783178}, "magic_list.list.last": {"tf": 2.449489742783178}, "magic_list.list.prepend": {"tf": 3}, "magic_list.list.reversed": {"tf": 1.7320508075688772}, "magic_list.list.sorted": {"tf": 2.449489742783178}, "magic_list.list.shuffled": {"tf": 3}, "magic_list.list.map": {"tf": 3}, "magic_list.list.rotate": {"tf": 3.4641016151377544}, "magic_list.list.filter": {"tf": 3.1622776601683795}, "magic_list.list.mask": {"tf": 3}, "magic_list.list.deduplicate": {"tf": 3}, "magic_list.list.reduce": {"tf": 2.449489742783178}, "magic_list.list.reduce_right": {"tf": 3}, "magic_list.list.fold": {"tf": 2.449489742783178}, "magic_list.list.fold_right": {"tf": 2.449489742783178}, "magic_list.list.scan": {"tf": 2.449489742783178}, "magic_list.list.scan_right": {"tf": 2.449489742783178}, "magic_list.list.merge": {"tf": 3}, "magic_list.list.flatten": {"tf": 3.872983346207417}, "magic_list.list.sum": {"tf": 3}, "magic_list.list.mean": {"tf": 3}, "magic_list.list.fill_left": {"tf": 3.4641016151377544}, "magic_list.list.fill_right": {"tf": 3.4641016151377544}, "magic_list.list.interleave": {"tf": 3}, "magic_list.list.select": {"tf": 3}, "magic_list.list.take": {"tf": 3.4641016151377544}, "magic_list.list.take_right": {"tf": 3.4641016151377544}, "magic_list.list.drop": {"tf": 3.4641016151377544}, "magic_list.list.drop_right": {"tf": 3.4641016151377544}, "magic_list.list.slice": {"tf": 4.242640687119285}, "magic_list.list.partition": {"tf": 3.872983346207417}, "magic_list.list.bisect": {"tf": 3.872983346207417}}, "df": 34}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {"magic_list.list.sorted": {"tf": 1}}, "df": 1}}, "p": {"docs": {"magic_list.list.interleave": {"tf": 1.4142135623730951}}, "df": 1}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list.rotate": {"tf": 1}}, "df": 1}}, "o": {"docs": {"magic_list.list.slice": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "s": {"docs": {"magic_list.list.rotate": {"tf": 1}}, "df": 1}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"magic_list.list.slice": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"magic_list.list.reversed": {"tf": 1}, "magic_list.list.sorted": {"tf": 1}, "magic_list.list.shuffled": {"tf": 1}}, "df": 3}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"magic_list.list.reduce": {"tf": 1}, "magic_list.list.reduce_right": {"tf": 1}, "magic_list.list.fold": {"tf": 1.7320508075688772}, "magic_list.list.fold_right": {"tf": 1.7320508075688772}, "magic_list.list.scan": {"tf": 1.7320508075688772}, "magic_list.list.scan_right": {"tf": 1.7320508075688772}, "magic_list.list.fill_left": {"tf": 1}, "magic_list.list.fill_right": {"tf": 1}, "magic_list.list.interleave": {"tf": 1}, "magic_list.list.trisect": {"tf": 1}}, "df": 10, "s": {"docs": {"magic_list.list.scan": {"tf": 1}, "magic_list.list.scan_right": {"tf": 1}, "magic_list.list.sum": {"tf": 1}}, "df": 3}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"magic_list.list.flatten": {"tf": 1.4142135623730951}, "magic_list.list.fill_left": {"tf": 1}, "magic_list.list.fill_right": {"tf": 1}, "magic_list.list.interleave": {"tf": 1}, "magic_list.list.take": {"tf": 1.4142135623730951}, "magic_list.list.take_right": {"tf": 1.4142135623730951}, "magic_list.list.drop": {"tf": 1.4142135623730951}, "magic_list.list.drop_right": {"tf": 1.4142135623730951}, "magic_list.list.slice": {"tf": 1.4142135623730951}}, "df": 9}}}}}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"magic_list.list.sorted": {"tf": 3.1622776601683795}, "magic_list.list.map": {"tf": 2.449489742783178}, "magic_list.list.filter": {"tf": 3.4641016151377544}, "magic_list.list.deduplicate": {"tf": 3.4641016151377544}, "magic_list.list.sum": {"tf": 2.449489742783178}, "magic_list.list.mean": {"tf": 2}}, "df": 6}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {"magic_list.list.sorted": {"tf": 1}}, "df": 1}, "e": {"docs": {}, "df": 0, "p": {"docs": {"magic_list.list.mask": {"tf": 1}, "magic_list.list.deduplicate": {"tf": 1}}, "df": 2}}}}, "y": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {"magic_list.list.slice": {"tf": 1}}, "df": 1}}}}}}, "pipeline": ["trimmer"], "_isPrebuiltIndex": true};

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();
